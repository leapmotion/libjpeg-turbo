/*
 * jocldec_kernels.h
 *
 * Copyright (C) 2012-2013, MulticoreWare Inc.
 * In July 2013, Written by Peixuan Zhang <zhangpeixuan.cn@gmail.com>
 * The OpenCL kernel code is written by
 *   Chunli  Zhang <chunli@multicorewareinc.com> and
 *   Peixuan Zhang <peixuan@multicorewareinc.com>
 * Based on the OpenCL extension for IJG JPEG library,
 * For conditions of distribution and use, see the accompanying README file.
 *
 * This file contains the kernels of OpenCL decoding.
 */

#ifndef __KERNEL_OPENCL_DEC_H__
#define __KERNEL_OPENCL_DEC_H__

static const char     * jocldec_cl_source1  =
"#define DESCALE(x,n) ((x) >> n)                                          \n"
"__kernel void IDCT_FAST_SHORT     (__global   short8 *src,               \n"
"                                   __global   uchar8 *dst,               \n"
"                                   __constant short8 *quant_tables,      \n"
"                                   __local    short  *inter,             \n"
"                                   const      uint    block_offset)      \n"
"{                                                                        \n"
"  uint   globalIdx = get_global_id(0);                                   \n"
"  uint   localIdx  = get_local_id (0);                                   \n"
"  uint   unitIdx   = localIdx  & 0x07; // MOD 8                          \n"
"  uint   blockIdx  = unitIdx + ((localIdx >> 3) << 6);                   \n"
"  uint   quantbIdx =                                                     \n"
"    ((block_offset - 3) < ((globalIdx >>3) % block_offset)) << 3;        \n"
"  short8 dataShort;                                                      \n"
"  uchar8 dataUchar;                                                      \n"
"  short  tmp0 , tmp1 , tmp2 , tmp3 , tmp4, tmp5, tmp6, tmp7;             \n"
"  short  tmp10, tmp11, tmp12, tmp13, z5  , z10 , z11 , z12 , z13;        \n"
"                                                                         \n"
"  dataShort = src[globalIdx] * quant_tables[quantbIdx + unitIdx];        \n"
"                                                                         \n"
"  if (dataShort.s1 == 0 && dataShort.s2 == 0 && dataShort.s3 == 0 &&     \n"
"      dataShort.s4 == 0 && dataShort.s5 == 0 && dataShort.s6 == 0 &&     \n"
"      dataShort.s7 == 0)                                                 \n"
"    inter[blockIdx +  0] = inter[blockIdx +  8] = inter[blockIdx + 16] = \n"
"    inter[blockIdx + 24] = inter[blockIdx + 32] = inter[blockIdx + 40] = \n"
"    inter[blockIdx + 48] = inter[blockIdx + 56] = dataShort.s0;          \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    tmp10 = dataShort.s0  + dataShort.s4;                                \n"
"    tmp11 = dataShort.s0  - dataShort.s4;                                \n"
"    tmp13 = dataShort.s2  + dataShort.s6;                                \n"
"    tmp12 = DESCALE((dataShort.s2 - dataShort.s6) * 362, 8) - tmp13;     \n"
"    tmp0  = tmp10 + tmp13;                                               \n"
"    tmp3  = tmp10 - tmp13;                                               \n"
"    tmp1  = tmp11 + tmp12;                                               \n"
"    tmp2  = tmp11 - tmp12;                                               \n"
"    z13   = dataShort.s5  + dataShort.s3;                                \n"
"    z10   = dataShort.s5  - dataShort.s3;                                \n"
"    z11   = dataShort.s1  + dataShort.s7;                                \n"
"    z12   = dataShort.s1  - dataShort.s7;                                \n"
"    tmp7  = z11   + z13;                                                 \n"
"    tmp11 = DESCALE((z11 - z13) * 362, 8);                               \n"
"    z5    = DESCALE((z10 + z12) * 473, 8);                               \n"
"    tmp10 = DESCALE(z12 * 277, 8) - z5;                                  \n"
"    tmp12 = DESCALE(-z10 * 669, 8)+ z5;                                  \n"
"    tmp6  = tmp12 - tmp7;                                                \n"
"    tmp5  = tmp11 - tmp6;                                                \n"
"    tmp4  = tmp10 + tmp5;                                                \n"
"                                                                         \n"
"    inter[blockIdx +  0] = tmp0 + tmp7;                                  \n"
"    inter[blockIdx +  8] = tmp1 + tmp6;                                  \n"
"    inter[blockIdx + 16] = tmp2 + tmp5;                                  \n"
"    inter[blockIdx + 24] = tmp3 - tmp4;                                  \n"
"    inter[blockIdx + 32] = tmp3 + tmp4;                                  \n"
"    inter[blockIdx + 40] = tmp2 - tmp5;                                  \n"
"    inter[blockIdx + 48] = tmp1 - tmp6;                                  \n"
"    inter[blockIdx + 56] = tmp0 - tmp7;                                  \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  dataShort = vload8(localIdx, inter);                                   \n"
"                                                                         \n"
"  if (dataShort.s1 == 0 && dataShort.s2 == 0 && dataShort.s3 == 0 &&     \n"
"      dataShort.s4 == 0 && dataShort.s5 == 0 && dataShort.s6 == 0 &&     \n"
"      dataShort.s7 == 0)                                                 \n"
"    dataUchar = convert_uchar_sat((dataShort.s0 >> 5) + 128);            \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    tmp10 = dataShort.s0 + dataShort.s4;                                 \n"
"    tmp11 = dataShort.s0 - dataShort.s4;                                 \n"
"    tmp13 = dataShort.s2 + dataShort.s6;                                 \n"
"    tmp12 = DESCALE((dataShort.s2 - dataShort.s6) * 362, 8) - tmp13;     \n"
"    z13   = dataShort.s5 + dataShort.s3;                                 \n"
"    z10   = dataShort.s5 - dataShort.s3;                                 \n"
"    z11   = dataShort.s1 + dataShort.s7;                                 \n"
"    z12   = dataShort.s1 - dataShort.s7;                                 \n"
"    tmp0  = tmp10 + tmp13;                                               \n"
"    tmp3  = tmp10 - tmp13;                                               \n"
"    tmp1  = tmp11 + tmp12;                                               \n"
"    tmp2  = tmp11 - tmp12;                                               \n"
"    tmp7  = z11 + z13;                                                   \n"
"    tmp11 = DESCALE((z11 - z13) * 362, 8);                               \n"
"    z5    = DESCALE((z10 + z12) * 473, 8);                               \n"
"    tmp10 = DESCALE(z12 * 277, 8) - z5;                                  \n"
"    tmp12 = DESCALE(-z10 * 669, 8) + z5;                                 \n"
"    tmp6  = tmp12 - tmp7;                                                \n"
"    tmp5  = tmp11 - tmp6;                                                \n"
"    tmp4  = tmp10 + tmp5;                                                \n"
"                                                                         \n"
"    dataShort.s0 = (tmp0 + tmp7) >>5;                                    \n"
"    dataShort.s7 = (tmp0 - tmp7) >>5;                                    \n"
"    dataShort.s1 = (tmp1 + tmp6) >>5;                                    \n"
"    dataShort.s6 = (tmp1 - tmp6) >>5;                                    \n"
"    dataShort.s2 = (tmp2 + tmp5) >>5;                                    \n"
"    dataShort.s5 = (tmp2 - tmp5) >>5;                                    \n"
"    dataShort.s4 = (tmp3 + tmp4) >>5;                                    \n"
"    dataShort.s3 = (tmp3 - tmp4) >>5;                                    \n"
"    dataShort    = dataShort + (short)128;                               \n"
"    dataUchar    = convert_uchar8_sat(dataShort);                        \n"
"  }                                                                      \n"
"  dst[globalIdx] = dataUchar;                                            \n"
"}                                                                        \n"
"__kernel void IDCT_SLOW_INT       (__global   short8 *src,               \n"
"                                   __global   uchar8 *dst,               \n"
"                                   __constant int8   *quant_tables,      \n"
"                                   __local    int    *inter,             \n"
"                                   const      uint    block_offset)      \n"
"{                                                                        \n"
"  uint   globalIdx = get_global_id(0);                                   \n"
"  uint   localIdx  = get_local_id (0);                                   \n"
"  uint   unitIdx   = localIdx  & 0x07; // MOD 8                          \n"
"  uint   blockIdx  = unitIdx + ((localIdx >> 3) << 6);                   \n"
"  uint   quantbIdx =                                                     \n"
"    ((block_offset - 3) < ((globalIdx >>3) % block_offset)) << 3;        \n"
"  int8   dataInt;                                                        \n"
"  uchar8 dataUchar;                                                      \n"
"  int    tmp0 , tmp1 , tmp2 , tmp3 ;                                     \n"
"  int    tmp10, tmp11, tmp12, tmp13;                                     \n"
"  int    z1, z2, z3, z4, z5;                                             \n"
"                                                                         \n"
"  dataInt = convert_int8(src[globalIdx]) *                               \n"
"    quant_tables[quantbIdx + unitIdx];                                   \n"
"                                                                         \n"
"  if (dataInt.s1 == 0 && dataInt.s2 == 0 && dataInt.s3 == 0 &&           \n"
"      dataInt.s4 == 0 && dataInt.s5 == 0 && dataInt.s6 == 0 &&           \n"
"      dataInt.s7 == 0)                                                   \n"
"    inter[blockIdx +  0] = inter[blockIdx +  8] = inter[blockIdx + 16] = \n"
"    inter[blockIdx + 24] = inter[blockIdx + 32] = inter[blockIdx + 40] = \n"
"    inter[blockIdx + 48] = inter[blockIdx + 56] = dataInt.s0 * 4;        \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    z1    = (dataInt.s2 + dataInt.s6) * 4433;                            \n"
"    tmp2  = z1 - dataInt.s6 * 15137;                                     \n"
"    tmp3  = z1 + dataInt.s2 * 6270;                                      \n"
"    tmp0  = (dataInt.s0 + dataInt.s4)<<13;                               \n"
"    tmp1  = (dataInt.s0 - dataInt.s4)<<13;                               \n"
"    tmp10 = tmp0 + tmp3;                                                 \n"
"    tmp13 = tmp0 - tmp3;                                                 \n"
"    tmp11 = tmp1 + tmp2;                                                 \n"
"    tmp12 = tmp1 - tmp2;                                                 \n"
"    z1    = dataInt.s7 + dataInt.s1;                                     \n"
"    z2    = dataInt.s5 + dataInt.s3;                                     \n"
"    z3    = dataInt.s7 + dataInt.s3;                                     \n"
"    z4    = dataInt.s5 + dataInt.s1;                                     \n"
"    z5    = (z3 + z4) * 9633;                                            \n"
"                                                                         \n"
"    tmp0  = dataInt.s7 * 2446;                                           \n"
"    tmp1  = dataInt.s5 * 16819;                                          \n"
"    tmp2  = dataInt.s3 * 25172;                                          \n"
"    tmp3  = dataInt.s1 * 12299;                                          \n"
"                                                                         \n"
"    z1    = -z1 * 7373;                                                  \n"
"    z2    = -z2 * 20995;                                                 \n"
"    z3    = -z3 * 16069 + z5;                                            \n"
"    z4    = -z4 * 3196  + z5;                                            \n"
"                                                                         \n"
"    tmp0 += z1 + z3;                                                     \n"
"    tmp1 += z2 + z4;                                                     \n"
"    tmp2 += z2 + z3;                                                     \n"
"    tmp3 += z1 + z4;                                                     \n"
"                                                                         \n"
"    inter[blockIdx +  0] = ((tmp10 + tmp3)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 56] = ((tmp10 - tmp3)+(1<<10))>>11;                 \n"
"    inter[blockIdx +  8] = ((tmp11 + tmp2)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 48] = ((tmp11 - tmp2)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 16] = ((tmp12 + tmp1)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 40] = ((tmp12 - tmp1)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 24] = ((tmp13 + tmp0)+(1<<10))>>11;                 \n"
"    inter[blockIdx + 32] = ((tmp13 - tmp0)+(1<<10))>>11;                 \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  dataInt = vload8(localIdx, inter);                                     \n"
"                                                                         \n"
"  if (dataInt.s1 == 0 && dataInt.s2 == 0 && dataInt.s3 == 0 &&           \n"
"      dataInt.s4 == 0 && dataInt.s5 == 0 && dataInt.s6 == 0 &&           \n"
"      dataInt.s7 == 0) {                                                 \n"
"    dataInt.s0 =  dataInt.s1 = dataInt.s2 = dataInt.s3 =dataInt.s4 =     \n"
"    dataInt.s5 = dataInt.s6 = dataInt.s7 = (dataInt.s0 + 16) >> 5;       \n"
"    dataUchar = convert_uchar8_sat(dataInt + 128);                       \n"
"  }                                                                      \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    z1 = (dataInt.s2 + dataInt.s6) * 4433;                               \n"
"    tmp2 = z1 - dataInt.s6 * 15137;                                      \n"
"    tmp3 = z1 + dataInt.s2 * 6270;                                       \n"
"    tmp0 = (dataInt.s0 + dataInt.s4) << 13;                              \n"
"    tmp1 = (dataInt.s0 - dataInt.s4) << 13;                              \n"
"                                                                         \n"
"    tmp10 = tmp0 + tmp3;                                                 \n"
"    tmp13 = tmp0 - tmp3;                                                 \n"
"    tmp11 = tmp1 + tmp2;                                                 \n"
"    tmp12 = tmp1 - tmp2;                                                 \n"
"                                                                         \n"
"    z1 = dataInt.s7 + dataInt.s1;                                        \n"
"    z2 = dataInt.s5 + dataInt.s3;                                        \n"
"    z3 = dataInt.s7 + dataInt.s3;                                        \n"
"    z4 = dataInt.s5 + dataInt.s1;                                        \n"
"                                                                         \n"
"    z5 = (z3 + z4)* 9633;                                                \n"
"                                                                         \n"
"    tmp0 = dataInt.s7 * 2446;                                            \n"
"    tmp1 = dataInt.s5 * 16819;                                           \n"
"    tmp2 = dataInt.s3 * 25172;                                           \n"
"    tmp3 = dataInt.s1 * 12299;                                           \n"
"                                                                         \n"
"    z1 = -z1 * 7373;                                                     \n"
"    z2 = -z2 * 20995;                                                    \n"
"    z3 = -z3 * 16069 + z5;                                               \n"
"    z4 = -z4 * 3196 + z5;                                                \n"
"                                                                         \n"
"    tmp0 += z1 + z3;                                                     \n"
"    tmp1 += z2 + z4;                                                     \n"
"    tmp2 += z2 + z3;                                                     \n"
"    tmp3 += z1 + z4;                                                     \n"
"                                                                         \n"
"    dataInt.s0 = ((tmp10 + tmp3)+(1<<17))>> 18;                          \n"
"    dataInt.s7 = ((tmp10 - tmp3)+(1<<17))>> 18;                          \n"
"    dataInt.s1 = ((tmp11 + tmp2)+(1<<17))>> 18;                          \n"
"    dataInt.s6 = ((tmp11 - tmp2)+(1<<17))>> 18;                          \n"
"    dataInt.s2 = ((tmp12 + tmp1)+(1<<17))>> 18;                          \n"
"    dataInt.s5 = ((tmp12 - tmp1)+(1<<17))>> 18;                          \n"
"    dataInt.s4 = ((tmp13 - tmp0)+(1<<17))>> 18;                          \n"
"    dataInt.s3 = ((tmp13 + tmp0)+(1<<17))>> 18;                          \n"
"    dataUchar    = convert_uchar8_sat(dataInt + 128);                    \n"
"  }                                                                      \n"
"  dst[globalIdx] = dataUchar;                                            \n"
"}                                                                        \n"
"__kernel void IDCT_FAST_FLOAT     (__global   short8 *src,               \n"
"                                   __global   uchar8 *dst,               \n"
"                                   __constant float8 *quant_tables,      \n"
"                                   __local    float  *inter,             \n"
"                                   const      uint    block_offset)      \n"
"{                                                                        \n"
"  uint   globalIdx = get_global_id(0);                                   \n"
"  uint   localIdx  = get_local_id (0);                                   \n"
"  uint   unitIdx   = localIdx  & 0x07; // MOD 8                          \n"
"  uint   blockIdx  = unitIdx + ((localIdx >> 3) << 6);                   \n"
"  uint   quantbIdx =                                                     \n"
"    ((block_offset - 3) < ((globalIdx >>3) % block_offset)) << 3;        \n"
"  float8 dataFloat;                                                      \n"
"  int8 dataInt;                                                          \n"
"  uchar8 dataUchar;                                                      \n"
"  float  tmp0 , tmp1 , tmp2 , tmp3 , tmp4, tmp5, tmp6, tmp7;             \n"
"  float  tmp10, tmp11, tmp12, tmp13, z5  , z10 , z11 , z12 , z13;        \n"
"                                                                         \n"
"  dataFloat = convert_float8(src[globalIdx]) *                           \n"
"    quant_tables[quantbIdx + unitIdx];                                   \n"
"                                                                         \n"
"  if (dataFloat.s1 == 0 && dataFloat.s2 == 0 && dataFloat.s3 == 0 &&     \n"
"      dataFloat.s4 == 0 && dataFloat.s5 == 0 && dataFloat.s6 == 0 &&     \n"
"      dataFloat.s7 == 0)                                                 \n"
"    inter[blockIdx +  0] = inter[blockIdx +  8] = inter[blockIdx + 16] = \n"
"    inter[blockIdx + 24] = inter[blockIdx + 32] = inter[blockIdx + 40] = \n"
"    inter[blockIdx + 48] = inter[blockIdx + 56] = dataFloat.s0;          \n"
"  else                                                                   \n"
"  {                                                                      \n"
"    tmp10 = dataFloat.s0  + dataFloat.s4;                                \n"
"    tmp11 = dataFloat.s0  - dataFloat.s4;                                \n"
"    tmp13 = dataFloat.s2  + dataFloat.s6;                                \n"
"    tmp12 = (dataFloat.s2 - dataFloat.s6) * 1.414213562f - tmp13;        \n"
"    tmp0  = tmp10 + tmp13;                                               \n"
"    tmp3  = tmp10 - tmp13;                                               \n"
"    tmp1  = tmp11 + tmp12;                                               \n"
"    tmp2  = tmp11 - tmp12;                                               \n"
"    z13   = dataFloat.s5  + dataFloat.s3;                                \n"
"    z10   = dataFloat.s5  - dataFloat.s3;                                \n"
"    z11   = dataFloat.s1  + dataFloat.s7;                                \n"
"    z12   = dataFloat.s1  - dataFloat.s7;                                \n"
"    tmp7  = z11 + z13;                                                   \n"
"    tmp11 = (z11 - z13) * 1.414213562f;                                  \n"
"    z5    = (z10 + z12) * 1.847759065f;                                  \n"
"    tmp10 = z12 * 1.082392200f - z5;                                     \n"
"    tmp12 = -z10 * 2.613125930f + z5;                                    \n"
"    tmp6  = tmp12 - tmp7;                                                \n"
"    tmp5  = tmp11 - tmp6;                                                \n"
"    tmp4  = tmp10 + tmp5;                                                \n"
"                                                                         \n"
"    inter[blockIdx +  0] = tmp0 + tmp7;                                  \n"
"    inter[blockIdx +  8] = tmp1 + tmp6;                                  \n"
"    inter[blockIdx + 16] = tmp2 + tmp5;                                  \n"
"    inter[blockIdx + 24] = tmp3 - tmp4;                                  \n"
"    inter[blockIdx + 32] = tmp3 + tmp4;                                  \n"
"    inter[blockIdx + 40] = tmp2 - tmp5;                                  \n"
"    inter[blockIdx + 48] = tmp1 - tmp6;                                  \n"
"    inter[blockIdx + 56] = tmp0 - tmp7;                                  \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  dataFloat = vload8(localIdx, inter);                                   \n"
"                                                                         \n"
"  tmp10 = dataFloat.s0 + dataFloat.s4;                                   \n"
"  tmp11 = dataFloat.s0 - dataFloat.s4;                                   \n"
"  tmp13 = dataFloat.s2 + dataFloat.s6;                                   \n"
"  tmp12 = (dataFloat.s2 - dataFloat.s6) * 1.414213562f - tmp13;          \n"
"  z13   = dataFloat.s5 + dataFloat.s3;                                   \n"
"  z10   = dataFloat.s5 - dataFloat.s3;                                   \n"
"  z11   = dataFloat.s1 + dataFloat.s7;                                   \n"
"  z12   = dataFloat.s1 - dataFloat.s7;                                   \n"
"  tmp0  = tmp10 + tmp13;                                                 \n"
"  tmp3  = tmp10 - tmp13;                                                 \n"
"  tmp1  = tmp11 + tmp12;                                                 \n"
"  tmp2  = tmp11 - tmp12;                                                 \n"
"  tmp7  = z11 + z13;                                                     \n"
"  tmp11 = (z11 - z13) * 1.414213562f;                                    \n"
"  z5    = (z10 + z12) * 1.847759065f;                                    \n"
"  tmp10 = z12 * 1.082392200f - z5;                                       \n"
"  tmp12 = -z10 * 2.613125930f + z5;                                      \n"
"  tmp6  = tmp12 - tmp7;                                                  \n"
"  tmp5  = tmp11 - tmp6;                                                  \n"
"  tmp4  = tmp10 + tmp5;                                                  \n"
"                                                                         \n"
"  dataFloat.s0 = tmp0 + tmp7;                                            \n"
"  dataFloat.s7 = tmp0 - tmp7;                                            \n"
"  dataFloat.s1 = tmp1 + tmp6;                                            \n"
"  dataFloat.s6 = tmp1 - tmp6;                                            \n"
"  dataFloat.s2 = tmp2 + tmp5;                                            \n"
"  dataFloat.s5 = tmp2 - tmp5;                                            \n"
"  dataFloat.s4 = tmp3 + tmp4;                                            \n"
"  dataFloat.s3 = tmp3 - tmp4;                                            \n"
"  dataInt      = convert_int8_rtz(dataFloat);                            \n"
"  dataInt.s0   = (dataInt.s0 + 4)>>3;                                    \n"
"  dataInt.s1   = (dataInt.s1 + 4)>>3;                                    \n"
"  dataInt.s2   = (dataInt.s2 + 4)>>3;                                    \n"
"  dataInt.s3   = (dataInt.s3 + 4)>>3;                                    \n"
"  dataInt.s4   = (dataInt.s4 + 4)>>3;                                    \n"
"  dataInt.s5   = (dataInt.s5 + 4)>>3;                                    \n"
"  dataInt.s6   = (dataInt.s6 + 4)>>3;                                    \n"
"  dataInt.s7   = (dataInt.s7 + 4)>>3;                                    \n"
"  dataUchar    = convert_uchar8_sat(dataInt + 128);                      \n"
"  dst[globalIdx] = dataUchar;                                            \n"
"}                                                                        \n";

static const char     * jocldec_cl_source2  =
"__kernel void UPSAMPLE_H1V1_RGB            (__global uchar  *src,        \n"
"                                        __global uchar4 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx = get_global_id(0);                                  \n"
"  uint    localIdx  = get_local_id (0);                                  \n"
"  uchar   dataInY   = src[globalIdx / 64 * 192 + localIdx];              \n"
"  uchar   dataInCb  = src[globalIdx / 64 * 192 + 64 + localIdx];         \n"
"  uchar   dataInCr  = src[globalIdx / 64 * 192 + 128 + localIdx];        \n"
"  uchar   imgR, imgG, imgB;                                              \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  imgB = convert_uchar_sat(                                              \n"
"    dataInY  + (((int)91881 * (dataInCr - 128) + (int)32768) >> 16));    \n"
"  imgG = convert_uchar_sat(                                              \n"
"    dataInY + ((((int)32768 - (int)22554 * (dataInCb - 128))             \n"
"    - ((int)46802 * (dataInCr - 128))) >> 16));                          \n"
"  imgR = convert_uchar_sat(                                              \n"
"    dataInY  + ((116130 * (dataInCb - 128) + 32768) >> 16));             \n"
"                                                                         \n"
"  inter[localIdx * 3 + 0] = imgB;                                        \n"
"  inter[localIdx * 3 + 1] = imgG;                                        \n"
"  inter[localIdx * 3 + 2] = imgR;                                        \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 48)                                                     \n"
"    dst[y * mcu_width * 48 + x * 6 + localIdx % 6                        \n"
"      + localIdx / 6 * mcu_width * 6] = vload4(localIdx, inter);         \n"
"}                                                                        \n"
"                                                                         \n"
"__kernel void UPSAMPLE_H1V2_RGB            (__global uchar  *src,        \n"
"                                        __global uchar4 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx = get_global_id(0);                                  \n"
"  uint    localIdx =  get_local_id(0);                                   \n"
"  uint    transOffset = ((localIdx >> 4) << 3) + (localIdx & 0x07);      \n"
"  uchar   dataInY = src[globalIdx / 128 * 256 + localIdx];               \n"
"  uchar   imgR, imgG, imgB;                                              \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx / 128 * 256 + 128 + localIdx];    \n"
"    cr_cache[localIdx] = src[globalIdx / 128 * 256 + 192 + localIdx];    \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  imgB = convert_uchar_sat(dataInY  +                                    \n"
"    (((int)91881 * (cr_cache[transOffset] - 128) + (int)32768) >> 16));  \n"
"  imgG = convert_uchar_sat(dataInY +                                     \n"
"    ((((int)32768 - (int)22554 * (cb_cache[transOffset] - 128))          \n"
"    - ((int)46802 * (cr_cache[transOffset] - 128))) >> 16));             \n"
"  imgR = convert_uchar_sat(dataInY  +                                    \n"
"    (((int)116130 * (cb_cache[transOffset] - 128) + (int)32768) >> 16)); \n"
"                                                                         \n"
"  inter[localIdx * 3 + 0] = imgB;                                        \n"
"  inter[localIdx * 3 + 1] = imgG;                                        \n"
"  inter[localIdx * 3 + 2] = imgR;                                        \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 96)                                                     \n"
"    dst[y * mcu_width * 96 + x * 6 + localIdx % 6 +                      \n"
"      localIdx / 6 * mcu_width * 6] = vload4(localIdx, inter);           \n"
"}                                                                        \n"
"                                                                         \n"
"__kernel void UPSAMPLE_H2V1_RGB        (__global uchar  *src,            \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset =                                                  \n"
"    ((localIdx >> 2) << 2) - (localIdx >> 5) * 60 + localIdx;            \n"
"  uchar2  dataInY  = vload2(globalIdx / 64 * 128 + localIdx, src);       \n"
"  uchar   dataInCb = cb_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 128 + localIdx];                          \n"
"  uchar   dataInCr = cr_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 192 + localIdx];                          \n"
"  uchar2  imgR, imgG, imgB;                                              \n"
"  int     valueY,valueCb, valueCr;                                       \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  cb_upsample[localIdx].x = dataInCb;                                    \n"
"  cb_upsample[localIdx].y = dataInCb;                                    \n"
"  cr_upsample[localIdx].x = dataInCr;                                    \n"
"  cr_upsample[localIdx].y = dataInCr;                                    \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY = convert_int(dataInY.x);                                       \n"
"  valueCb = convert_int(cb_upsample[transOffset].x);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].x);                     \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[transOffset].y);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].y);                     \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 6 + 0] = imgB.x;                                   \n"
"  inter[transOffset * 6 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 6 + 2] = imgR.x;                                   \n"
"  inter[transOffset * 6 + 3] = imgB.y;                                   \n"
"  inter[transOffset * 6 + 4] = imgG.y;                                   \n"
"  inter[transOffset * 6 + 5] = imgR.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 48)                                                     \n"
"    dst[y * mcu_width * 48 + x * 6 + localIdx % 6 +                      \n"
"      localIdx / 6 * mcu_width * 6] = vload8(localIdx, inter);           \n"
"}                                                                        \n"
"                                                                         \n"
"__kernel void UPSAMPLE_H2V2_RGB        (__global uchar  *src,            \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset = localIdx - (localIdx >> 5) * 60 +                \n"
"    (localIdx >> 2 << 2) + (localIdx >> 6) * 56;                         \n"
"  uchar2  dataInY     = vload2(globalIdx/128 * 192 + localIdx, src);     \n"
"  uchar2  imgR, imgG, imgB;                                              \n"
"  int     valueY, valueCb, valueCr;                                      \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx/128 * 384 + 256 + localIdx];      \n"
"    cr_cache[localIdx] = src[globalIdx/128 * 384 + 320 + localIdx];      \n"
"    cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0] =         \n"
"      cb_cache[localIdx];                                                \n"
"    cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4] =         \n"
"      cb_cache[localIdx];                                                \n"
"    cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0] =         \n"
"      cr_cache[localIdx];                                                \n"
"    cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4] =         \n"
"      cr_cache[localIdx];                                                \n"
"  }                                                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.x);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].x);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].x);                        \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].y);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].y);                        \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 6 + 0] = imgB.x;                                   \n"
"  inter[transOffset * 6 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 6 + 2] = imgR.x;                                   \n"
"  inter[transOffset * 6 + 3] = imgB.y;                                   \n"
"  inter[transOffset * 6 + 4] = imgG.y;                                   \n"
"  inter[transOffset * 6 + 5] = imgR.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 96)                                                     \n"
"    dst[y * mcu_width * 96 + x * 6 + localIdx % 6                        \n"
"      + localIdx / 6 * mcu_width * 6] = vload8(localIdx, inter);         \n"
"                                                                         \n"
"}                                                                        \n";

static const char     * jocldec_cl_source3  =
"__kernel void UPSAMPLE_H2V1_FANCY_RGB   (__global uchar  *src,           \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset =                                                  \n"
"    ((localIdx >> 2) << 2) - (localIdx >> 5) * 60 + localIdx;            \n"
"  uchar   dataInCbLeft, dataInCrLeft, dataInCbRight, dataInCrRight;      \n"
"  uchar2  dataInY  = vload2(globalIdx / 64 * 128 + localIdx, src);       \n"
"  uchar   dataInCb = cb_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 128 + localIdx];                          \n"
"  uchar   dataInCr = cr_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 192 + localIdx];                          \n"
"  uchar2  imgR, imgG, imgB;                                              \n"
"  int     valueY,valueCb, valueCr;                                       \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  if (!(localIdx & 0x07) && !(globalIdx / 64 % mcu_width)) {             \n"
"    dataInCbLeft  = dataInCb -1;                                         \n"
"    dataInCrLeft  = dataInCr -1;                                         \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"  else if (!(localIdx & 0x07) && (globalIdx / 64 % mcu_width)) {         \n"
"    dataInCbLeft  = src[globalIdx / 64 * 256 -64 + localIdx - 57];       \n"
"    dataInCrLeft  = src[globalIdx / 64 * 256 + localIdx - 57];           \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"  else if ((localIdx & 0x07) == 7 &&                                     \n"
"           (globalIdx / 64 % mcu_width) == (mcu_width - 1)) {            \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = dataInCb -2;                                         \n"
"    dataInCrRight = dataInCr -2;                                         \n"
"  }                                                                      \n"
"  else if ((localIdx & 0x07) == 7 &&                                     \n"
"           (globalIdx / 64 % mcu_width) != (mcu_width - 1)) {            \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = src[globalIdx / 64 * 256 + localIdx + 57 + 320];     \n"
"    dataInCrRight = src[globalIdx / 64 * 256 + localIdx + 57 + 384];     \n"
"  }                                                                      \n"
"  else {                                                                 \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"                                                                         \n"
"  cb_upsample[localIdx].x = (dataInCb * 3 + dataInCbLeft  + 1) >> 2;     \n"
"  cb_upsample[localIdx].y = (dataInCb * 3 + dataInCbRight + 2) >> 2;     \n"
"  cr_upsample[localIdx].x = (dataInCr * 3 + dataInCrLeft  + 1) >> 2;     \n"
"  cr_upsample[localIdx].y = (dataInCr * 3 + dataInCrRight + 2) >> 2;     \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY = convert_int(dataInY.x);                                       \n"
"  valueCb = convert_int(cb_upsample[transOffset].x);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].x);                     \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[transOffset].y);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].y);                     \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 6 + 0] = imgB.x;                                   \n"
"  inter[transOffset * 6 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 6 + 2] = imgR.x;                                   \n"
"  inter[transOffset * 6 + 3] = imgB.y;                                   \n"
"  inter[transOffset * 6 + 4] = imgG.y;                                   \n"
"  inter[transOffset * 6 + 5] = imgR.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 48)                                                     \n"
"    dst[y * mcu_width * 48 + x * 6 + localIdx % 6 +                      \n"
"      localIdx / 6 * mcu_width * 6] = vload8(localIdx, inter);           \n"
"}                                                                        \n"
"__kernel void UPSAMPLE_H2V2_FANCY_RGB      (__global uchar  *src,        \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint   globalIdx   = get_global_id(0);                                 \n"
"  uint   localIdx    = get_local_id (0);                                 \n"
"  uint   transOffset = localIdx - (localIdx >> 5) * 60 +                 \n"
"    (localIdx >> 2 << 2) + (localIdx >> 6) * 56;                         \n"
"  uchar2 dataInY     = vload2(globalIdx/128 * 192 + localIdx, src);      \n"
"  uchar2 imgR, imgG, imgB;                                               \n"
"  int    valueY, valueCb, valueCr;                                       \n"
"  uint   x, y;                                                           \n"
"  int    dataInTopCb, dataInBottomCb, dataInRightCb, dataInLeftCb;       \n"
"  int    dataInLeftTopCb, dataInRightTopCb;                              \n"
"  int    dataInLeftBottomCb, dataInRightBottomCb;                        \n"
"  int    dataInTopCr, dataInBottomCr, dataInRightCr, dataInLeftCr;       \n"
"  int    dataInLeftTopCr, dataInRightTopCr;                              \n"
"  int    dataInLeftBottomCr, dataInRightBottomCr;                        \n"
"                                                                         \n"
"  uchar   dataInCb ,dataInCr;                                            \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx/128 * 384 + 256 + localIdx];      \n"
"    cr_cache[localIdx] = src[globalIdx/128 * 384 + 320 + localIdx];      \n"
"  }                                                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"  dataInCb = cb_cache[localIdx];                                         \n"
"  dataInCr = cr_cache[localIdx];                                         \n"
"                                                                         \n"
"  dataInTopCb    = src[globalIdx/128 * 384 + 256 + localIdx - 8];        \n"
"  dataInBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 8];        \n"
"  dataInRightCb  = src[globalIdx/128 * 384 + 256 + localIdx + 1];        \n"
"  dataInLeftCb   = src[globalIdx/128 * 384 + 256 + localIdx - 1];        \n"
"  dataInLeftTopCb = src[globalIdx/128 * 384 + 256 + localIdx - 9];       \n"
"  dataInRightTopCb = src[globalIdx/128 * 384 + 256 + localIdx - 7];      \n"
"  dataInLeftBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 7];    \n"
"  dataInRightBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 9];   \n"
"                                                                         \n"
"  dataInTopCr    = src[globalIdx/128 * 384 + 320 + localIdx - 8];        \n"
"  dataInBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 8];        \n"
"  dataInRightCr  = src[globalIdx/128 * 384 + 320 + localIdx + 1];        \n"
"  dataInLeftCr   = src[globalIdx/128 * 384 + 320 + localIdx - 1];        \n"
"  dataInLeftTopCr = src[globalIdx/128 * 384 + 320 + localIdx - 9];       \n"
"  dataInRightTopCr = src[globalIdx/128 * 384 + 320 + localIdx - 7];      \n"
"  dataInLeftBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 7];    \n"
"  dataInRightBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 9];   \n"
"                                                                         \n"
"  if (globalIdx == 0) {                                                  \n"
"    dataInTopCb        = dataInCb;                                       \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInCb;                                       \n"
"    dataInRightTopCb   = dataInRightCb;                                  \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInTopCr        = dataInCr;                                       \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInCr;                                       \n"
"    dataInRightTopCr   = dataInRightCr;                                  \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if (globalIdx == get_global_size(0) - 65) {                       \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInRightCr;                                 \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    ((globalIdx / 128 / mcu_width) ==                                    \n"
"    (get_global_size(0) /128 /mcu_width - 1)) && (localIdx == 56))  {    \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftCb        = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInBottomCb;                                \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftCr        = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = dataInBottomCr;                                \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"    (!(globalIdx / 128 / mcu_width)) && (localIdx == 7)){                \n"
"    dataInTopCb         = dataInCb;                                      \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInLeftCb;                                  \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInTopCr         = dataInCr;                                      \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInLeftCr;                                  \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (!(globalIdx / 128 / mcu_width)) && (localIdx == 7)){                \n"
"    dataInTopCb         = dataInCb;                                      \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 256];          \n"
"    dataInLeftTopCb     = dataInLeftCb;                                  \n"
"    dataInRightTopCb    = dataInRightCb;                                 \n"
"    dataInRightBottomCb = src[(globalIdx/128 + 1) * 384 + 264];          \n"
"                                                                         \n"
"    dataInTopCr         = dataInCr;                                      \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 320];          \n"
"    dataInLeftTopCr     = dataInLeftCr;                                  \n"
"    dataInRightTopCr    = dataInRightCr;                                 \n"
"    dataInRightBottomCr = src[(globalIdx/128 + 1) * 384 + 328];          \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 / mcu_width) &&                             \n"
"    (localIdx == 0) && (globalIdx / 128 % mcu_width)){                   \n"
"    dataInTopCb        = dataInCb;                                       \n"
"    dataInLeftCb       = src[(globalIdx/128 - 1) * 384 + 263];           \n"
"    dataInLeftTopCb    = dataInLeftCb;                                   \n"
"    dataInRightTopCb   = dataInRightCb;                                  \n"
"    dataInLeftBottomCb = src[(globalIdx/128 - 1) * 384 + 271];           \n"
"                                                                         \n"
"    dataInTopCr        = dataInCr;                                       \n"
"    dataInLeftCr       = src[(globalIdx/128 - 1) * 384 + 327];           \n"
"    dataInLeftTopCr    = dataInLeftCr;                                   \n"
"    dataInRightTopCr   = dataInRightCr;                                  \n"
"    dataInLeftBottomCr = src[(globalIdx/128 - 1) * 384 + 335];           \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 256];  \n"
"    dataInLeftCb        = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInBottomCb;                                \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) * 384 + 257];  \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 320];  \n"
"    dataInLeftCr        = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = dataInBottomCr;                                \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) * 384 + 321];  \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    (globalIdx / 128 / mcu_width) && (localIdx == 0))  {                 \n"
"    dataInTopCb        = src[(globalIdx/128 - mcu_width) * 384 + 312];   \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInTopCb;                                    \n"
"    dataInRightTopCb   = src[(globalIdx/128 - mcu_width) * 384 + 313];   \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInTopCr        = src[(globalIdx/128 - mcu_width) * 384 + 376];   \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInTopCr;                                    \n"
"    dataInRightTopCr   = src[(globalIdx/128 - mcu_width) * 384 + 377];   \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63)){       \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 263];  \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) * 384 + 262];  \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 327];  \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) * 384 + 326];  \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"     (globalIdx / 128 / mcu_width) && (localIdx == 7)) {                 \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 319];  \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width) * 384 + 318];  \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 383];  \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width) * 384 + 382];  \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63))  {     \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 312];          \n"
"    dataInRightTopCb    = src[(globalIdx/128 + 1) * 384 + 304];          \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr = dataInCr;                                           \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 376];          \n"
"    dataInRightTopCr    = src[(globalIdx/128 + 1) * 384 + 368];          \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) &&                              \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 319];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - 1) * 384 + 311];          \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 383];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - 1) * 384 + 375];          \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width)&&                               \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 256];  \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 319];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - 1) * 384 + 311];          \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width- 1)* 384 + 263];\n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) * 384 + 257];  \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 320];  \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 383];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - 1) * 384 + 375];          \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width- 1)* 384 + 327];\n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) * 384 + 321];  \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 263];  \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 312];          \n"
"    dataInRightTopCb    = src[(globalIdx/128 + 1) * 384 + 304];          \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) * 384 + 262];  \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width+ 1)* 384 + 256];\n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 327];  \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 376];          \n"
"    dataInRightTopCr    = src[(globalIdx/128 + 1) * 384 + 368];          \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) * 384 + 326];  \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width+ 1)* 384 + 320];\n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"     (globalIdx / 128 / mcu_width) && (localIdx == 7)){                  \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 319];  \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 256];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width) * 384 + 318];  \n"
"    dataInRightTopCb    = src[(globalIdx/128 - mcu_width+ 1)* 384 + 312];\n"
"    dataInRightBottomCb = src[(globalIdx/128 + 1) * 384 + 264];          \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 383];  \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 320];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width) * 384 + 382];  \n"
"    dataInRightTopCr    = src[(globalIdx/128 - mcu_width+ 1)* 384 + 376];\n"
"    dataInRightBottomCr = src[(globalIdx/128 + 1) * 384 + 320 + 8];      \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 / mcu_width) && (localIdx == 0) &&           \n"
"     (globalIdx / 128 % mcu_width)){                                     \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 312];  \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 256 + 7];      \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width- 1)* 384 + 319];\n"
"    dataInRightTopCb    = src[(globalIdx/128 - mcu_width) * 384 + 313];  \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 - 1) * 384 + 271];          \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 376];  \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 327];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width- 1)* 384 + 383];\n"
"    dataInRightTopCr    = src[(globalIdx/128 - mcu_width) * 384 + 377];  \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 - 1) * 384 + 320 + 15];     \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"      (localIdx % 8 == 7) && localIdx != 7 && localIdx != 63) {          \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 / mcu_width) && !(localIdx / 8)&&           \n"
"      localIdx != 7 && localIdx != 0 ){                                  \n"
"    dataInTopCb      = dataInCb;                                         \n"
"    dataInLeftTopCb  = dataInLeftCb;                                     \n"
"    dataInRightTopCb = dataInRightCb;                                    \n"
"                                                                         \n"
"    dataInTopCr      = dataInCr;                                         \n"
"    dataInLeftTopCr  = dataInLeftCr;                                     \n"
"    dataInRightTopCr = dataInRightCr;                                    \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) && !(localIdx & 0x07) &&       \n"
"    (localIdx != 0) && (localIdx != 56))  {                              \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInTopCb;                                    \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInTopCr;                                    \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if ((localIdx / 8 == 7) &&                                        \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) &&                          \n"
"    (localIdx != 56) && (localIdx != 63))  {                             \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) && !(localIdx & 0x07) &&        \n"
"    (localIdx != 0) && (localIdx != 56))  {                              \n"
"    dataInLeftCb       = src[(globalIdx/128- 1)*384 +256 +localIdx + 7]; \n"
"    dataInLeftTopCb    = src[(globalIdx/128- 1)*384 +256 +localIdx - 1]; \n"
"    dataInLeftBottomCb = src[(globalIdx/128- 1)*384 +256 +localIdx + 15];\n"
"                                                                         \n"
"    dataInLeftCr       = src[(globalIdx/128- 1)*384 +320 +localIdx + 7]; \n"
"    dataInLeftTopCr    = src[(globalIdx/128- 1)*384 +320 +localIdx - 1]; \n"
"    dataInLeftBottomCr = src[(globalIdx/128- 1)*384 +320 +localIdx + 15];\n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 / mcu_width) && !(localIdx / 8) &&           \n"
"      localIdx != 7 && localIdx != 0 ){                                  \n"
"    dataInTopCb       = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 312 + localIdx];                           \n"
"    dataInLeftTopCb   = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 311 + localIdx];                           \n"
"    dataInRightTopCb  = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 313 + localIdx];                           \n"
"                                                                         \n"
"    dataInTopCr       = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 376 + localIdx];                           \n"
"    dataInLeftTopCr   = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 375 + localIdx];                           \n"
"    dataInRightTopCr  = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 377 + localIdx];                           \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"      (localIdx % 8 == 7) &&                                             \n"
"      localIdx != 7 && localIdx != 63) {                                 \n"
"    dataInRightCb       = src[(globalIdx/128+ 1) * 384 + 249 + localIdx];\n"
"    dataInRightTopCb    = src[(globalIdx/128+ 1) * 384 + 241 + localIdx];\n"
"    dataInRightBottomCb = src[(globalIdx/128+ 1) * 384 + 257 + localIdx];\n"
"                                                                         \n"
"    dataInRightCr       = src[(globalIdx/128+ 1) * 384 + 313 + localIdx];\n"
"    dataInRightTopCr    = src[(globalIdx/128+ 1) * 384 + 305 + localIdx];\n"
"    dataInRightBottomCr = src[(globalIdx/128+ 1) * 384 + 321 + localIdx];\n"
"  }                                                                      \n"
"  else if ((localIdx / 8 == 7) &&                                        \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) &&                          \n"
"    (localIdx != 56) && (localIdx != 63))  {                             \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 200 + localIdx];                         \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 199 + localIdx];                         \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 201 + localIdx];                         \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 264 + localIdx];                         \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 263 + localIdx];                         \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 265 + localIdx];                         \n"
"  }                                                                      \n"
"                                                                         \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].x =         \n"
"    ((dataInCb * 3 + dataInTopCb) * 3 +                                  \n"
"    dataInLeftCb * 3 + dataInLeftTopCb + 8) >> 4;                        \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].y =         \n"
"    ((dataInCb * 3 + dataInTopCb) * 3 +                                  \n"
"    dataInRightCb * 3 + dataInRightTopCb + 7) >> 4;                      \n"
"                                                                         \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].x =         \n"
"    ((dataInCb * 3 + dataInBottomCb) * 3 +                               \n"
"    dataInLeftCb * 3 + dataInLeftBottomCb + 8) >> 4;                     \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].y =         \n"
"    ((dataInCb * 3 + dataInBottomCb) * 3 +                               \n"
"    dataInRightCb * 3 + dataInRightBottomCb + 7) >> 4;                   \n"
"                                                                         \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].x =         \n"
"    ((dataInCr * 3 + dataInTopCr) * 3 +                                  \n"
"    dataInLeftCr * 3 + dataInLeftTopCr + 8) >> 4;                        \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].y =         \n"
"    ((dataInCr * 3 + dataInTopCr) * 3 +                                  \n"
"    dataInRightCr * 3 + dataInRightTopCr + 7) >> 4;                      \n"
"                                                                         \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].x =         \n"
"    ((dataInCr * 3 + dataInBottomCr) * 3 +                               \n"
"    dataInLeftCr * 3 + dataInLeftBottomCr + 8) >> 4;                     \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].y =         \n"
"    ((dataInCr * 3 + dataInBottomCr) * 3 +                               \n"
"    dataInRightCr * 3 + dataInRightBottomCr + 7) >> 4;                   \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.x);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].x);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].x);                        \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].y);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].y);                        \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 6 + 0] = imgB.x;                                   \n"
"  inter[transOffset * 6 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 6 + 2] = imgR.x;                                   \n"
"  inter[transOffset * 6 + 3] = imgB.y;                                   \n"
"  inter[transOffset * 6 + 4] = imgG.y;                                   \n"
"  inter[transOffset * 6 + 5] = imgR.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 96)                                                     \n"
"    dst[y * mcu_width * 96 + x * 6 + localIdx % 6                        \n"
"      + localIdx / 6 * mcu_width * 6] = vload8(localIdx, inter);         \n"
"                                                                         \n"
"}                                                                        \n";

static const char     * jocldec_cl_source4  =
"__kernel void UPSAMPLE_H1V1_RGBA           (__global uchar  *src,        \n"
"                                        __global uchar4 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx = get_global_id(0);                                  \n"
"  uint    localIdx  = get_local_id (0);                                  \n"
"  uchar   dataInY   = src[globalIdx / 64 * 192 + localIdx];              \n"
"  uchar   dataInCb  = src[globalIdx / 64 * 192 + 64 + localIdx];         \n"
"  uchar   dataInCr  = src[globalIdx / 64 * 192 + 128 + localIdx];        \n"
"  uchar   imgR, imgG, imgB, imgA;                                        \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  imgB = convert_uchar_sat(                                              \n"
"    dataInY  + (((int)91881 * (dataInCr - 128) + (int)32768) >> 16));    \n"
"  imgG = convert_uchar_sat(                                              \n"
"    dataInY + ((((int)32768 - (int)22554 * (dataInCb - 128))             \n"
"    - ((int)46802 * (dataInCr - 128))) >> 16));                          \n"
"  imgR = convert_uchar_sat(                                              \n"
"    dataInY  + ((116130 * (dataInCb - 128) + 32768) >> 16));             \n"
"                                                                         \n"
"  imgA = 255;                                                            \n"
"                                                                         \n"
"  inter[localIdx * 4 + 0] = imgB;                                        \n"
"  inter[localIdx * 4 + 1] = imgG;                                        \n"
"  inter[localIdx * 4 + 2] = imgR;                                        \n"
"  inter[localIdx * 4 + 3] = imgA;                                        \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 64)                                                     \n"
"    dst[y * mcu_width * 64 + x * 8 + localIdx % 8                        \n"
"      + localIdx / 8 * mcu_width * 8] = vload4(localIdx, inter);         \n"
"}                                                                        \n"
"__kernel void UPSAMPLE_H1V2_RGBA       (__global uchar  *src,            \n"
"                                        __global uchar4 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx = get_global_id(0);                                  \n"
"  uint    localIdx =  get_local_id(0);                                   \n"
"  uint    transOffset = ((localIdx >> 4) << 3) + (localIdx & 0x07);      \n"
"  uchar   dataInY = src[globalIdx / 128 * 256 + localIdx];               \n"
"  uchar   imgR, imgG, imgB,imgA;                                         \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx / 128 * 256 + 128 + localIdx];    \n"
"    cr_cache[localIdx] = src[globalIdx / 128 * 256 + 192 + localIdx];    \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  imgB = convert_uchar_sat(dataInY  +                                    \n"
"    (((int)91881 * (cr_cache[transOffset] - 128) + (int)32768) >> 16));  \n"
"  imgG = convert_uchar_sat(dataInY +                                     \n"
"    ((((int)32768 - (int)22554 * (cb_cache[transOffset] - 128))          \n"
"    - ((int)46802 * (cr_cache[transOffset] - 128))) >> 16));             \n"
"  imgR = convert_uchar_sat(dataInY  +                                    \n"
"    (((int)116130 * (cb_cache[transOffset] - 128) + (int)32768) >> 16)); \n"
"                                                                         \n"
"  inter[localIdx * 4+ 0] = imgB;                                         \n"
"  inter[localIdx * 4+ 1] = imgG;                                         \n"
"  inter[localIdx * 4+ 2] = imgR;                                         \n"
"  inter[localIdx * 4+ 3] = imgA;                                         \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 128)                                                    \n"
"    dst[y * mcu_width * 128 + x * 8 + localIdx % 8 +                     \n"
"      localIdx / 8 * mcu_width * 8] = vload4(localIdx, inter);           \n"
"}                                                                        \n"
"                                                                         \n"
"__kernel void UPSAMPLE_H2V1_RGBA            (__global uchar  *src,       \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset =                                                  \n"
"    ((localIdx >> 2) << 2) - (localIdx >> 5) * 60 + localIdx;            \n"
"  uchar   dataInCbLeft, dataInCrLeft, dataInCbRight, dataInCrRight;      \n"
"  uchar2  dataInY  = vload2(globalIdx / 64 * 128 + localIdx, src);       \n"
"  uchar   dataInCb = cb_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 128 + localIdx];                          \n"
"  uchar   dataInCr = cr_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 192 + localIdx];                          \n"
"  uchar2  imgR, imgG, imgB,imgA;                                         \n"
"  int     valueY,valueCb, valueCr;                                       \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  cb_upsample[localIdx].x = dataInCb;                                    \n"
"  cb_upsample[localIdx].y = dataInCb;                                    \n"
"  cr_upsample[localIdx].x = dataInCr;                                    \n"
"  cr_upsample[localIdx].y = dataInCr;                                    \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY = convert_int(dataInY.x);                                       \n"
"  valueCb = convert_int(cb_upsample[transOffset].x);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].x);                     \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[transOffset].y);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].y);                     \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 8 + 0] = imgB.x;                                   \n"
"  inter[transOffset * 8 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 8 + 2] = imgR.x;                                   \n"
"  inter[transOffset * 8 + 3] = imgA.x;                                   \n"
"  inter[transOffset * 8 + 4] = imgB.y;                                   \n"
"  inter[transOffset * 8 + 5] = imgG.y;                                   \n"
"  inter[transOffset * 8 + 6] = imgR.y;                                   \n"
"  inter[transOffset * 8 + 7] = imgA.y;                                   \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 64)                                                     \n"
"    dst[y * mcu_width * 64 + x * 8 + localIdx % 8 +                      \n"
"      localIdx / 8 * mcu_width * 8] = vload8(localIdx, inter);           \n"
"}                                                                        \n"
"                                                                         \n"
"__kernel void UPSAMPLE_H2V2_RGBA            (__global uchar  *src,       \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset = localIdx - (localIdx >> 5) * 60 +                \n"
"    (localIdx >> 2 << 2) + (localIdx >> 6) * 56;                         \n"
"  uchar2  dataInY     = vload2(globalIdx/128 * 192 + localIdx, src);     \n"
"  uchar2  imgR, imgG, imgB,imgA;                                         \n"
"  int     valueY, valueCb, valueCr;                                      \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx/128 * 384 + 256 + localIdx];      \n"
"    cr_cache[localIdx] = src[globalIdx/128 * 384 + 320 + localIdx];      \n"
"    cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0] =         \n"
"      cb_cache[localIdx];                                                \n"
"    cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4] =         \n"
"      cb_cache[localIdx];                                                \n"
"    cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0] =         \n"
"      cr_cache[localIdx];                                                \n"
"    cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4] =         \n"
"      cr_cache[localIdx];                                                \n"
"  }                                                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.x);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].x);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].x);                        \n"
"  imgA = 255;                                                            \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].y);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].y);                        \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 8 + 0] = imgB.x;                                   \n"
"  inter[transOffset * 8 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 8 + 2] = imgR.x;                                   \n"
"  inter[transOffset * 8 + 3] = imgA.x;                                   \n"
"  inter[transOffset * 8 + 4] = imgB.y;                                   \n"
"  inter[transOffset * 8 + 5] = imgG.y;                                   \n"
"  inter[transOffset * 8 + 6] = imgR.y;                                   \n"
"  inter[transOffset * 8 + 7] = imgA.y;                                   \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 128)                                                    \n"
"    dst[y * mcu_width * 128 + x * 8 + localIdx % 8                       \n"
"      + localIdx / 8 * mcu_width * 8] = vload8(localIdx, inter);         \n"
"                                                                         \n"
"}                                                                        \n";

static const char     * jocldec_cl_source5  =
"__kernel void UPSAMPLE_H2V1_FANCY_RGBA      (__global uchar  *src,       \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset =                                                  \n"
"    ((localIdx >> 2) << 2) - (localIdx >> 5) * 60 + localIdx;            \n"
"  uchar   dataInCbLeft, dataInCrLeft, dataInCbRight, dataInCrRight;      \n"
"  uchar2  dataInY  = vload2(globalIdx / 64 * 128 + localIdx, src);       \n"
"  uchar   dataInCb = cb_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 128 + localIdx];                          \n"
"  uchar   dataInCr = cr_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 192 + localIdx];                          \n"
"  uchar2  imgR, imgG, imgB,imgA;                                         \n"
"  int     valueY,valueCb, valueCr;                                       \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  if (!(localIdx & 0x07) && !(globalIdx / 64 % mcu_width)) {             \n"
"    dataInCbLeft  = dataInCb -1;                                         \n"
"    dataInCrLeft  = dataInCr -1;                                         \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"  else if (!(localIdx & 0x07) && (globalIdx / 64 % mcu_width)) {         \n"
"    dataInCbLeft  = src[globalIdx / 64 * 256 -64 + localIdx - 57];       \n"
"    dataInCrLeft  = src[globalIdx / 64 * 256 + localIdx - 57];           \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"  else if ((localIdx & 0x07) == 7 &&                                     \n"
"           (globalIdx / 64 % mcu_width) == (mcu_width - 1)) {            \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = dataInCb -2;                                         \n"
"    dataInCrRight = dataInCr -2;                                         \n"
"  }                                                                      \n"
"  else if ((localIdx & 0x07) == 7 &&                                     \n"
"           (globalIdx / 64 % mcu_width) != (mcu_width - 1)) {            \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = src[globalIdx / 64 * 256 + localIdx + 57 + 320];     \n"
"    dataInCrRight = src[globalIdx / 64 * 256 + localIdx + 57 + 384];     \n"
"  }                                                                      \n"
"  else {                                                                 \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"                                                                         \n"
"  cb_upsample[localIdx].x = (dataInCb * 3 + dataInCbLeft  + 1) >> 2;     \n"
"  cb_upsample[localIdx].y = (dataInCb * 3 + dataInCbRight + 2) >> 2;     \n"
"  cr_upsample[localIdx].x = (dataInCr * 3 + dataInCrLeft  + 1) >> 2;     \n"
"  cr_upsample[localIdx].y = (dataInCr * 3 + dataInCrRight + 2) >> 2;     \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  imgA = 255;                                                            \n"
"  valueY = convert_int(dataInY.x);                                       \n"
"  valueCb = convert_int(cb_upsample[transOffset].x);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].x);                     \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[transOffset].y);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].y);                     \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 8 + 0] = imgB.x;                                   \n"
"  inter[transOffset * 8 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 8 + 2] = imgR.x;                                   \n"
"  inter[transOffset * 8 + 3] = imgA.x;                                   \n"
"  inter[transOffset * 8 + 4] = imgB.y;                                   \n"
"  inter[transOffset * 8 + 5] = imgG.y;                                   \n"
"  inter[transOffset * 8 + 6] = imgR.y;                                   \n"
"  inter[transOffset * 8 + 7] = imgA.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 64)                                                     \n"
"    dst[y * mcu_width * 64 + x * 8 + localIdx % 8 +                      \n"
"      localIdx / 8 * mcu_width * 8] = vload8(localIdx, inter);           \n"
"}                                                                        \n"
"__kernel void UPSAMPLE_H2V2_FANCY_RGBA     (__global uchar  *src,        \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint   globalIdx   = get_global_id(0);                                 \n"
"  uint   localIdx    = get_local_id (0);                                 \n"
"  uint   transOffset = localIdx - (localIdx >> 5) * 60 +                 \n"
"    (localIdx >> 2 << 2) + (localIdx >> 6) * 56;                         \n"
"  uchar2 dataInY     = vload2(globalIdx/128 * 192 + localIdx, src);      \n"
"  uchar2 imgR, imgG, imgB,imgA;                                          \n"
"  int    valueY, valueCb, valueCr;                                       \n"
"  uint   x, y;                                                           \n"
"  int    dataInTopCb, dataInBottomCb, dataInRightCb, dataInLeftCb;       \n"
"  int    dataInLeftTopCb, dataInRightTopCb;                              \n"
"  int    dataInLeftBottomCb, dataInRightBottomCb;                        \n"
"  int    dataInTopCr, dataInBottomCr, dataInRightCr, dataInLeftCr;       \n"
"  int    dataInLeftTopCr, dataInRightTopCr;                              \n"
"  int    dataInLeftBottomCr, dataInRightBottomCr;                        \n"
"                                                                         \n"
"  uchar   dataInCb ,dataInCr;                                            \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx/128 * 384 + 256 + localIdx];      \n"
"    cr_cache[localIdx] = src[globalIdx/128 * 384 + 320 + localIdx];      \n"
"  }                                                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"  dataInCb = cb_cache[localIdx];                                         \n"
"  dataInCr = cr_cache[localIdx];                                         \n"
"                                                                         \n"
"  dataInTopCb    = src[globalIdx/128 * 384 + 256 + localIdx - 8];        \n"
"  dataInBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 8];        \n"
"  dataInRightCb  = src[globalIdx/128 * 384 + 256 + localIdx + 1];        \n"
"  dataInLeftCb   = src[globalIdx/128 * 384 + 256 + localIdx - 1];        \n"
"  dataInLeftTopCb = src[globalIdx/128 * 384 + 256 + localIdx - 9];       \n"
"  dataInRightTopCb = src[globalIdx/128 * 384 + 256 + localIdx - 7];      \n"
"  dataInLeftBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 7];    \n"
"  dataInRightBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 9];   \n"
"                                                                         \n"
"  dataInTopCr    = src[globalIdx/128 * 384 + 320 + localIdx - 8];        \n"
"  dataInBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 8];        \n"
"  dataInRightCr  = src[globalIdx/128 * 384 + 320 + localIdx + 1];        \n"
"  dataInLeftCr   = src[globalIdx/128 * 384 + 320 + localIdx - 1];        \n"
"  dataInLeftTopCr = src[globalIdx/128 * 384 + 320 + localIdx - 9];       \n"
"  dataInRightTopCr = src[globalIdx/128 * 384 + 320 + localIdx - 7];      \n"
"  dataInLeftBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 7];    \n"
"  dataInRightBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 9];   \n"
"                                                                         \n"
"  if (globalIdx == 0) {                                                  \n"
"    dataInTopCb        = dataInCb;                                       \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInCb;                                       \n"
"    dataInRightTopCb   = dataInRightCb;                                  \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInTopCr        = dataInCr;                                       \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInCr;                                       \n"
"    dataInRightTopCr   = dataInRightCr;                                  \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if (globalIdx == get_global_size(0) - 65) {                       \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInRightCr;                                 \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    ((globalIdx / 128 / mcu_width) ==                                    \n"
"    (get_global_size(0) /128 /mcu_width - 1)) && (localIdx == 56))  {    \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftCb        = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInBottomCb;                                \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftCr        = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = dataInBottomCr;                                \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"    (!(globalIdx / 128 / mcu_width)) && (localIdx == 7)){                \n"
"    dataInTopCb         = dataInCb;                                      \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInLeftCb;                                  \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInTopCr         = dataInCr;                                      \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInLeftCr;                                  \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (!(globalIdx / 128 / mcu_width)) && (localIdx == 7)){                \n"
"    dataInTopCb         = dataInCb;                                      \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 256];          \n"
"    dataInLeftTopCb     = dataInLeftCb;                                  \n"
"    dataInRightTopCb    = dataInRightCb;                                 \n"
"    dataInRightBottomCb = src[(globalIdx/128 + 1) * 384 + 264];          \n"
"                                                                         \n"
"    dataInTopCr         = dataInCr;                                      \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 320];          \n"
"    dataInLeftTopCr     = dataInLeftCr;                                  \n"
"    dataInRightTopCr    = dataInRightCr;                                 \n"
"    dataInRightBottomCr = src[(globalIdx/128 + 1) * 384 + 328];          \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 / mcu_width) &&                             \n"
"    (localIdx == 0) && (globalIdx / 128 % mcu_width)){                   \n"
"    dataInTopCb        = dataInCb;                                       \n"
"    dataInLeftCb       = src[(globalIdx/128 - 1) * 384 + 263];           \n"
"    dataInLeftTopCb    = dataInLeftCb;                                   \n"
"    dataInRightTopCb   = dataInRightCb;                                  \n"
"    dataInLeftBottomCb = src[(globalIdx/128 - 1) * 384 + 271];           \n"
"                                                                         \n"
"    dataInTopCr        = dataInCr;                                       \n"
"    dataInLeftCr       = src[(globalIdx/128 - 1) * 384 + 327];           \n"
"    dataInLeftTopCr    = dataInLeftCr;                                   \n"
"    dataInRightTopCr   = dataInRightCr;                                  \n"
"    dataInLeftBottomCr = src[(globalIdx/128 - 1) * 384 + 335];           \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 256];  \n"
"    dataInLeftCb        = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInBottomCb;                                \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) * 384 + 257];  \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 320];  \n"
"    dataInLeftCr        = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = dataInBottomCr;                                \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) * 384 + 321];  \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    (globalIdx / 128 / mcu_width) && (localIdx == 0))  {                 \n"
"    dataInTopCb        = src[(globalIdx/128 - mcu_width) * 384 + 312];   \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInTopCb;                                    \n"
"    dataInRightTopCb   = src[(globalIdx/128 - mcu_width) * 384 + 313];   \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInTopCr        = src[(globalIdx/128 - mcu_width) * 384 + 376];   \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInTopCr;                                    \n"
"    dataInRightTopCr   = src[(globalIdx/128 - mcu_width) * 384 + 377];   \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63)){       \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 263];  \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) * 384 + 262];  \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 327];  \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) * 384 + 326];  \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"     (globalIdx / 128 / mcu_width) && (localIdx == 7)) {                 \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 319];  \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width) * 384 + 318];  \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 383];  \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width) * 384 + 382];  \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63))  {     \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 312];          \n"
"    dataInRightTopCb    = src[(globalIdx/128 + 1) * 384 + 304];          \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr = dataInCr;                                           \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 376];          \n"
"    dataInRightTopCr    = src[(globalIdx/128 + 1) * 384 + 368];          \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) &&                              \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 319];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - 1) * 384 + 311];          \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 383];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - 1) * 384 + 375];          \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width)&&                               \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 256];  \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 319];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - 1) * 384 + 311];          \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width- 1)* 384 + 263];\n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) * 384 + 257];  \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 320];  \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 383];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - 1) * 384 + 375];          \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width- 1)* 384 + 327];\n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) * 384 + 321];  \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 263];  \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 312];          \n"
"    dataInRightTopCb    = src[(globalIdx/128 + 1) * 384 + 304];          \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) * 384 + 262];  \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width+ 1)* 384 + 256];\n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 327];  \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 376];          \n"
"    dataInRightTopCr    = src[(globalIdx/128 + 1) * 384 + 368];          \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) * 384 + 326];  \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width+ 1)* 384 + 320];\n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"     (globalIdx / 128 / mcu_width) && (localIdx == 7)){                  \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 319];  \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 256];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width) * 384 + 318];  \n"
"    dataInRightTopCb    = src[(globalIdx/128 - mcu_width+ 1)* 384 + 312];\n"
"    dataInRightBottomCb = src[(globalIdx/128 + 1) * 384 + 264];          \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 383];  \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 320];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width) * 384 + 382];  \n"
"    dataInRightTopCr    = src[(globalIdx/128 - mcu_width+ 1)* 384 + 376];\n"
"    dataInRightBottomCr = src[(globalIdx/128 + 1) * 384 + 320 + 8];      \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 / mcu_width) && (localIdx == 0) &&           \n"
"     (globalIdx / 128 % mcu_width)){                                     \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 312];  \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 256 + 7];      \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width- 1)* 384 + 319];\n"
"    dataInRightTopCb    = src[(globalIdx/128 - mcu_width) * 384 + 313];  \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 - 1) * 384 + 271];          \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 376];  \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 327];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width- 1)* 384 + 383];\n"
"    dataInRightTopCr    = src[(globalIdx/128 - mcu_width) * 384 + 377];  \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 - 1) * 384 + 320 + 15];     \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"      (localIdx % 8 == 7) && localIdx != 7 && localIdx != 63) {          \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 / mcu_width) && !(localIdx / 8)&&           \n"
"      localIdx != 7 && localIdx != 0 ){                                  \n"
"    dataInTopCb      = dataInCb;                                         \n"
"    dataInLeftTopCb  = dataInLeftCb;                                     \n"
"    dataInRightTopCb = dataInRightCb;                                    \n"
"                                                                         \n"
"    dataInTopCr      = dataInCr;                                         \n"
"    dataInLeftTopCr  = dataInLeftCr;                                     \n"
"    dataInRightTopCr = dataInRightCr;                                    \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) && !(localIdx & 0x07) &&       \n"
"    (localIdx != 0) && (localIdx != 56))  {                              \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInTopCb;                                    \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInTopCr;                                    \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if ((localIdx / 8 == 7) &&                                        \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) &&                          \n"
"    (localIdx != 56) && (localIdx != 63))  {                             \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) && !(localIdx & 0x07) &&        \n"
"    (localIdx != 0) && (localIdx != 56))  {                              \n"
"    dataInLeftCb       = src[(globalIdx/128- 1)*384 +256 +localIdx + 7]; \n"
"    dataInLeftTopCb    = src[(globalIdx/128- 1)*384 +256 +localIdx - 1]; \n"
"    dataInLeftBottomCb = src[(globalIdx/128- 1)*384 +256 +localIdx + 15];\n"
"                                                                         \n"
"    dataInLeftCr       = src[(globalIdx/128- 1)*384 +320 +localIdx + 7]; \n"
"    dataInLeftTopCr    = src[(globalIdx/128- 1)*384 +320 +localIdx - 1]; \n"
"    dataInLeftBottomCr = src[(globalIdx/128- 1)*384 +320 +localIdx + 15];\n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 / mcu_width) && !(localIdx / 8) &&           \n"
"      localIdx != 7 && localIdx != 0 ){                                  \n"
"    dataInTopCb       = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 312 + localIdx];                           \n"
"    dataInLeftTopCb   = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 311 + localIdx];                           \n"
"    dataInRightTopCb  = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 313 + localIdx];                           \n"
"                                                                         \n"
"    dataInTopCr       = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 376 + localIdx];                           \n"
"    dataInLeftTopCr   = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 375 + localIdx];                           \n"
"    dataInRightTopCr  = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 377 + localIdx];                           \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"      (localIdx % 8 == 7) &&                                             \n"
"      localIdx != 7 && localIdx != 63) {                                 \n"
"    dataInRightCb       = src[(globalIdx/128+ 1) * 384 + 249 + localIdx];\n"
"    dataInRightTopCb    = src[(globalIdx/128+ 1) * 384 + 241 + localIdx];\n"
"    dataInRightBottomCb = src[(globalIdx/128+ 1) * 384 + 257 + localIdx];\n"
"                                                                         \n"
"    dataInRightCr       = src[(globalIdx/128+ 1) * 384 + 313 + localIdx];\n"
"    dataInRightTopCr    = src[(globalIdx/128+ 1) * 384 + 305 + localIdx];\n"
"    dataInRightBottomCr = src[(globalIdx/128+ 1) * 384 + 321 + localIdx];\n"
"  }                                                                      \n"
"  else if ((localIdx / 8 == 7) &&                                        \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) &&                          \n"
"    (localIdx != 56) && (localIdx != 63))  {                             \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 200 + localIdx];                         \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 199 + localIdx];                         \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 201 + localIdx];                         \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 264 + localIdx];                         \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 263 + localIdx];                         \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 265 + localIdx];                         \n"
"  }                                                                      \n"
"                                                                         \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].x =         \n"
"    ((dataInCb * 3 + dataInTopCb) * 3 +                                  \n"
"    dataInLeftCb * 3 + dataInLeftTopCb + 8) >> 4;                        \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].y =         \n"
"    ((dataInCb * 3 + dataInTopCb) * 3 +                                  \n"
"    dataInRightCb * 3 + dataInRightTopCb + 7) >> 4;                      \n"
"                                                                         \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].x =         \n"
"    ((dataInCb * 3 + dataInBottomCb) * 3 +                               \n"
"    dataInLeftCb * 3 + dataInLeftBottomCb + 8) >> 4;                     \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].y =         \n"
"    ((dataInCb * 3 + dataInBottomCb) * 3 +                               \n"
"    dataInRightCb * 3 + dataInRightBottomCb + 7) >> 4;                   \n"
"                                                                         \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].x =         \n"
"    ((dataInCr * 3 + dataInTopCr) * 3 +                                  \n"
"    dataInLeftCr * 3 + dataInLeftTopCr + 8) >> 4;                        \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].y =         \n"
"    ((dataInCr * 3 + dataInTopCr) * 3 +                                  \n"
"    dataInRightCr * 3 + dataInRightTopCr + 7) >> 4;                      \n"
"                                                                         \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].x =         \n"
"    ((dataInCr * 3 + dataInBottomCr) * 3 +                               \n"
"    dataInLeftCr * 3 + dataInLeftBottomCr + 8) >> 4;                     \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].y =         \n"
"    ((dataInCr * 3 + dataInBottomCr) * 3 +                               \n"
"    dataInRightCr * 3 + dataInRightBottomCr + 7) >> 4;                   \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.x);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].x);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].x);                        \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].y);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].y);                        \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 8 + 0] = imgB.x;                                   \n"
"  inter[transOffset * 8 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 8 + 2] = imgR.x;                                   \n"
"  inter[transOffset * 8 + 3] = imgA.x;                                   \n"
"  inter[transOffset * 8 + 4] = imgB.y;                                   \n"
"  inter[transOffset * 8 + 5] = imgG.y;                                   \n"
"  inter[transOffset * 8 + 6] = imgR.y;                                   \n"
"  inter[transOffset * 8 + 7] = imgA.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 128)                                                    \n"
"    dst[y * mcu_width * 128 + x * 8 + localIdx % 8                       \n"
"      + localIdx / 8 * mcu_width * 8] = vload8(localIdx, inter);         \n"
"                                                                         \n"
"}                                                                        \n";
static const char     * jocldec_cl_source6  =
"__kernel void UPSAMPLE_H1V1_BGR            (__global uchar  *src,        \n"
"                                        __global uchar4 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx = get_global_id(0);                                  \n"
"  uint    localIdx  = get_local_id (0);                                  \n"
"  uchar   dataInY   = src[globalIdx / 64 * 192 + localIdx];              \n"
"  uchar   dataInCb  = src[globalIdx / 64 * 192 + 64 + localIdx];         \n"
"  uchar   dataInCr  = src[globalIdx / 64 * 192 + 128 + localIdx];        \n"
"  uchar   imgR, imgG, imgB;                                              \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  imgB = convert_uchar_sat(                                              \n"
"    dataInY  + (((int)91881 * (dataInCr - 128) + (int)32768) >> 16));    \n"
"  imgG = convert_uchar_sat(                                              \n"
"    dataInY + ((((int)32768 - (int)22554 * (dataInCb - 128))             \n"
"    - ((int)46802 * (dataInCr - 128))) >> 16));                          \n"
"  imgR = convert_uchar_sat(                                              \n"
"    dataInY  + ((116130 * (dataInCb - 128) + 32768) >> 16));             \n"
"                                                                         \n"
"  inter[localIdx * 3 + 0] = imgR;                                        \n"
"  inter[localIdx * 3 + 1] = imgG;                                        \n"
"  inter[localIdx * 3 + 2] = imgB;                                        \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 48)                                                     \n"
"    dst[y * mcu_width * 48 + x * 6 + localIdx % 6                        \n"
"      + localIdx / 6 * mcu_width * 6] = vload4(localIdx, inter);         \n"
"}                                                                        \n"
"                                                                         \n"
"__kernel void UPSAMPLE_H1V2_BGR            (__global uchar  *src,        \n"
"                                        __global uchar4 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx = get_global_id(0);                                  \n"
"  uint    localIdx =  get_local_id(0);                                   \n"
"  uint    transOffset = ((localIdx >> 4) << 3) + (localIdx & 0x07);      \n"
"  uchar   dataInY = src[globalIdx / 128 * 256 + localIdx];               \n"
"  uchar   imgR, imgG, imgB;                                              \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx / 128 * 256 + 128 + localIdx];    \n"
"    cr_cache[localIdx] = src[globalIdx / 128 * 256 + 192 + localIdx];    \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  imgB = convert_uchar_sat(dataInY  +                                    \n"
"    (((int)91881 * (cr_cache[transOffset] - 128) + (int)32768) >> 16));  \n"
"  imgG = convert_uchar_sat(dataInY +                                     \n"
"    ((((int)32768 - (int)22554 * (cb_cache[transOffset] - 128))          \n"
"    - ((int)46802 * (cr_cache[transOffset] - 128))) >> 16));             \n"
"  imgR = convert_uchar_sat(dataInY  +                                    \n"
"    (((int)116130 * (cb_cache[transOffset] - 128) + (int)32768) >> 16)); \n"
"                                                                         \n"
"  inter[localIdx * 3 + 0] = imgR;                                        \n"
"  inter[localIdx * 3 + 1] = imgG;                                        \n"
"  inter[localIdx * 3 + 2] = imgB;                                        \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 96)                                                     \n"
"    dst[y * mcu_width * 96 + x * 6 + localIdx % 6 +                      \n"
"      localIdx / 6 * mcu_width * 6] = vload4(localIdx, inter);           \n"
"}                                                                        \n"
"                                                                         \n"
"__kernel void UPSAMPLE_H2V1_BGR            (__global uchar  *src,        \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset =                                                  \n"
"    ((localIdx >> 2) << 2) - (localIdx >> 5) * 60 + localIdx;            \n"
"  uchar2  dataInY  = vload2(globalIdx / 64 * 128 + localIdx, src);       \n"
"  uchar   dataInCb = cb_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 128 + localIdx];                          \n"
"  uchar   dataInCr = cr_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 192 + localIdx];                          \n"
"  uchar2  imgR, imgG, imgB;                                              \n"
"  int     valueY,valueCb, valueCr;                                       \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  cb_upsample[localIdx].x = dataInCb;                                    \n"
"  cb_upsample[localIdx].y = dataInCb;                                    \n"
"  cr_upsample[localIdx].x = dataInCr;                                    \n"
"  cr_upsample[localIdx].y = dataInCr;                                    \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY = convert_int(dataInY.x);                                       \n"
"  valueCb = convert_int(cb_upsample[transOffset].x);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].x);                     \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[transOffset].y);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].y);                     \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 6 + 0] = imgR.x;                                   \n"
"  inter[transOffset * 6 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 6 + 2] = imgB.x;                                   \n"
"  inter[transOffset * 6 + 3] = imgR.y;                                   \n"
"  inter[transOffset * 6 + 4] = imgG.y;                                   \n"
"  inter[transOffset * 6 + 5] = imgB.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 48)                                                     \n"
"    dst[y * mcu_width * 48 + x * 6 + localIdx % 6 +                      \n"
"      localIdx / 6 * mcu_width * 6] = vload8(localIdx, inter);           \n"
"}                                                                        \n"
"                                                                         \n"
"__kernel void UPSAMPLE_H2V2_BGR        (__global uchar  *src,            \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset = localIdx - (localIdx >> 5) * 60 +                \n"
"    (localIdx >> 2 << 2) + (localIdx >> 6) * 56;                         \n"
"  uchar2  dataInY     = vload2(globalIdx/128 * 192 + localIdx, src);     \n"
"  uchar2  imgR, imgG, imgB;                                              \n"
"  int     valueY, valueCb, valueCr;                                      \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx/128 * 384 + 256 + localIdx];      \n"
"    cr_cache[localIdx] = src[globalIdx/128 * 384 + 320 + localIdx];      \n"
"    cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0] =         \n"
"      cb_cache[localIdx];                                                \n"
"    cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4] =         \n"
"      cb_cache[localIdx];                                                \n"
"    cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0] =         \n"
"      cr_cache[localIdx];                                                \n"
"    cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4] =         \n"
"      cr_cache[localIdx];                                                \n"
"  }                                                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.x);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].x);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].x);                        \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].y);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].y);                        \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 6 + 0] = imgR.x;                                   \n"
"  inter[transOffset * 6 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 6 + 2] = imgB.x;                                   \n"
"  inter[transOffset * 6 + 3] = imgR.y;                                   \n"
"  inter[transOffset * 6 + 4] = imgG.y;                                   \n"
"  inter[transOffset * 6 + 5] = imgB.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 96)                                                     \n"
"    dst[y * mcu_width * 96 + x * 6 + localIdx % 6                        \n"
"      + localIdx / 6 * mcu_width * 6] = vload8(localIdx, inter);         \n"
"                                                                         \n"
"}                                                                        \n";

static const char     * jocldec_cl_source7  =
"__kernel void UPSAMPLE_H2V1_FANCY_BGR   (__global uchar  *src,           \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint    globalIdx   = get_global_id(0);                                \n"
"  uint    localIdx    = get_local_id (0);                                \n"
"  uint    transOffset =                                                  \n"
"    ((localIdx >> 2) << 2) - (localIdx >> 5) * 60 + localIdx;            \n"
"  uchar   dataInCbLeft, dataInCrLeft, dataInCbRight, dataInCrRight;      \n"
"  uchar2  dataInY  = vload2(globalIdx / 64 * 128 + localIdx, src);       \n"
"  uchar   dataInCb = cb_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 128 + localIdx];                          \n"
"  uchar   dataInCr = cr_cache[localIdx] =                                \n"
"    src[globalIdx / 64 * 256 + 192 + localIdx];                          \n"
"  uchar2  imgR, imgG, imgB;                                              \n"
"  int     valueY,valueCb, valueCr;                                       \n"
"  uint    x, y;                                                          \n"
"                                                                         \n"
"  x = (globalIdx >> 6) % mcu_width;                                      \n"
"  y = (globalIdx >> 6) / mcu_width;                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  if (!(localIdx & 0x07) && !(globalIdx / 64 % mcu_width)) {             \n"
"    dataInCbLeft  = dataInCb -1;                                         \n"
"    dataInCrLeft  = dataInCr -1;                                         \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"  else if (!(localIdx & 0x07) && (globalIdx / 64 % mcu_width)) {         \n"
"    dataInCbLeft  = src[globalIdx / 64 * 256 -64 + localIdx - 57];       \n"
"    dataInCrLeft  = src[globalIdx / 64 * 256 + localIdx - 57];           \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"  else if ((localIdx & 0x07) == 7 &&                                     \n"
"           (globalIdx / 64 % mcu_width) == (mcu_width - 1)) {            \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = dataInCb -2;                                         \n"
"    dataInCrRight = dataInCr -2;                                         \n"
"  }                                                                      \n"
"  else if ((localIdx & 0x07) == 7 &&                                     \n"
"           (globalIdx / 64 % mcu_width) != (mcu_width - 1)) {            \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = src[globalIdx / 64 * 256 + localIdx + 57 + 320];     \n"
"    dataInCrRight = src[globalIdx / 64 * 256 + localIdx + 57 + 384];     \n"
"  }                                                                      \n"
"  else {                                                                 \n"
"    dataInCbLeft  = cb_cache[localIdx-1];                                \n"
"    dataInCrLeft  = cr_cache[localIdx-1];                                \n"
"    dataInCbRight = cb_cache[localIdx+1];                                \n"
"    dataInCrRight = cr_cache[localIdx+1];                                \n"
"  }                                                                      \n"
"                                                                         \n"
"  cb_upsample[localIdx].x = (dataInCb * 3 + dataInCbLeft  + 1) >> 2;     \n"
"  cb_upsample[localIdx].y = (dataInCb * 3 + dataInCbRight + 2) >> 2;     \n"
"  cr_upsample[localIdx].x = (dataInCr * 3 + dataInCrLeft  + 1) >> 2;     \n"
"  cr_upsample[localIdx].y = (dataInCr * 3 + dataInCrRight + 2) >> 2;     \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY = convert_int(dataInY.x);                                       \n"
"  valueCb = convert_int(cb_upsample[transOffset].x);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].x);                     \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[transOffset].y);                     \n"
"  valueCr = convert_int(cr_upsample[transOffset].y);                     \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 6 + 0] = imgR.x;                                   \n"
"  inter[transOffset * 6 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 6 + 2] = imgB.x;                                   \n"
"  inter[transOffset * 6 + 3] = imgR.y;                                   \n"
"  inter[transOffset * 6 + 4] = imgG.y;                                   \n"
"  inter[transOffset * 6 + 5] = imgB.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 48)                                                     \n"
"    dst[y * mcu_width * 48 + x * 6 + localIdx % 6 +                      \n"
"      localIdx / 6 * mcu_width * 6] = vload8(localIdx, inter);           \n"
"}                                                                        \n"
"__kernel void UPSAMPLE_H2V2_FANCY_BGR      (__global uchar  *src,        \n"
"                                        __global uchar8 *dst,            \n"
"                                        __local  uchar  *inter,          \n"
"                                        __local  uchar  *cb_cache,       \n"
"                                        __local  uchar  *cr_cache,       \n"
"                                        __local  uchar2 *cb_upsample,    \n"
"                                        __local  uchar2 *cr_upsample,    \n"
"                                        const    uint    mcu_width)      \n"
"{                                                                        \n"
"  uint   globalIdx   = get_global_id(0);                                 \n"
"  uint   localIdx    = get_local_id (0);                                 \n"
"  uint   transOffset = localIdx - (localIdx >> 5) * 60 +                 \n"
"    (localIdx >> 2 << 2) + (localIdx >> 6) * 56;                         \n"
"  uchar2 dataInY     = vload2(globalIdx/128 * 192 + localIdx, src);      \n"
"  uchar2 imgR, imgG, imgB;                                               \n"
"  int    valueY, valueCb, valueCr;                                       \n"
"  uint   x, y;                                                           \n"
"  int    dataInTopCb, dataInBottomCb, dataInRightCb, dataInLeftCb;       \n"
"  int    dataInLeftTopCb, dataInRightTopCb;                              \n"
"  int    dataInLeftBottomCb, dataInRightBottomCb;                        \n"
"  int    dataInTopCr, dataInBottomCr, dataInRightCr, dataInLeftCr;       \n"
"  int    dataInLeftTopCr, dataInRightTopCr;                              \n"
"  int    dataInLeftBottomCr, dataInRightBottomCr;                        \n"
"                                                                         \n"
"  uchar   dataInCb ,dataInCr;                                            \n"
"  x = (globalIdx >> 7) % mcu_width;                                      \n"
"  y = (globalIdx >> 7) / mcu_width;                                      \n"
"                                                                         \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"    cb_cache[localIdx] = src[globalIdx/128 * 384 + 256 + localIdx];      \n"
"    cr_cache[localIdx] = src[globalIdx/128 * 384 + 320 + localIdx];      \n"
"  }                                                                      \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 64)                                                     \n"
"  {                                                                      \n"
"  dataInCb = cb_cache[localIdx];                                         \n"
"  dataInCr = cr_cache[localIdx];                                         \n"
"                                                                         \n"
"  dataInTopCb    = src[globalIdx/128 * 384 + 256 + localIdx - 8];        \n"
"  dataInBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 8];        \n"
"  dataInRightCb  = src[globalIdx/128 * 384 + 256 + localIdx + 1];        \n"
"  dataInLeftCb   = src[globalIdx/128 * 384 + 256 + localIdx - 1];        \n"
"  dataInLeftTopCb = src[globalIdx/128 * 384 + 256 + localIdx - 9];       \n"
"  dataInRightTopCb = src[globalIdx/128 * 384 + 256 + localIdx - 7];      \n"
"  dataInLeftBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 7];    \n"
"  dataInRightBottomCb = src[globalIdx/128 * 384 + 256 + localIdx + 9];   \n"
"                                                                         \n"
"  dataInTopCr    = src[globalIdx/128 * 384 + 320 + localIdx - 8];        \n"
"  dataInBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 8];        \n"
"  dataInRightCr  = src[globalIdx/128 * 384 + 320 + localIdx + 1];        \n"
"  dataInLeftCr   = src[globalIdx/128 * 384 + 320 + localIdx - 1];        \n"
"  dataInLeftTopCr = src[globalIdx/128 * 384 + 320 + localIdx - 9];       \n"
"  dataInRightTopCr = src[globalIdx/128 * 384 + 320 + localIdx - 7];      \n"
"  dataInLeftBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 7];    \n"
"  dataInRightBottomCr = src[globalIdx/128 * 384 + 320 + localIdx + 9];   \n"
"                                                                         \n"
"  if (globalIdx == 0) {                                                  \n"
"    dataInTopCb        = dataInCb;                                       \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInCb;                                       \n"
"    dataInRightTopCb   = dataInRightCb;                                  \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInTopCr        = dataInCr;                                       \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInCr;                                       \n"
"    dataInRightTopCr   = dataInRightCr;                                  \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if (globalIdx == get_global_size(0) - 65) {                       \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInRightCr;                                 \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    ((globalIdx / 128 / mcu_width) ==                                    \n"
"    (get_global_size(0) /128 /mcu_width - 1)) && (localIdx == 56))  {    \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftCb        = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInBottomCb;                                \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftCr        = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = dataInBottomCr;                                \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"    (!(globalIdx / 128 / mcu_width)) && (localIdx == 7)){                \n"
"    dataInTopCb         = dataInCb;                                      \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInLeftCb;                                  \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInTopCr         = dataInCr;                                      \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInLeftCr;                                  \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (!(globalIdx / 128 / mcu_width)) && (localIdx == 7)){                \n"
"    dataInTopCb         = dataInCb;                                      \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 256];          \n"
"    dataInLeftTopCb     = dataInLeftCb;                                  \n"
"    dataInRightTopCb    = dataInRightCb;                                 \n"
"    dataInRightBottomCb = src[(globalIdx/128 + 1) * 384 + 264];          \n"
"                                                                         \n"
"    dataInTopCr         = dataInCr;                                      \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 320];          \n"
"    dataInLeftTopCr     = dataInLeftCr;                                  \n"
"    dataInRightTopCr    = dataInRightCr;                                 \n"
"    dataInRightBottomCr = src[(globalIdx/128 + 1) * 384 + 328];          \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 / mcu_width) &&                             \n"
"    (localIdx == 0) && (globalIdx / 128 % mcu_width)){                   \n"
"    dataInTopCb        = dataInCb;                                       \n"
"    dataInLeftCb       = src[(globalIdx/128 - 1) * 384 + 263];           \n"
"    dataInLeftTopCb    = dataInLeftCb;                                   \n"
"    dataInRightTopCb   = dataInRightCb;                                  \n"
"    dataInLeftBottomCb = src[(globalIdx/128 - 1) * 384 + 271];           \n"
"                                                                         \n"
"    dataInTopCr        = dataInCr;                                       \n"
"    dataInLeftCr       = src[(globalIdx/128 - 1) * 384 + 327];           \n"
"    dataInLeftTopCr    = dataInLeftCr;                                   \n"
"    dataInRightTopCr   = dataInRightCr;                                  \n"
"    dataInLeftBottomCr = src[(globalIdx/128 - 1) * 384 + 335];           \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 256];  \n"
"    dataInLeftCb        = dataInCb;                                      \n"
"    dataInLeftTopCb     = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = dataInBottomCb;                                \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) * 384 + 257];  \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 320];  \n"
"    dataInLeftCr        = dataInCr;                                      \n"
"    dataInLeftTopCr     = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = dataInBottomCr;                                \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) * 384 + 321];  \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) &&                             \n"
"    (globalIdx / 128 / mcu_width) && (localIdx == 0))  {                 \n"
"    dataInTopCb        = src[(globalIdx/128 - mcu_width) * 384 + 312];   \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInTopCb;                                    \n"
"    dataInRightTopCb   = src[(globalIdx/128 - mcu_width) * 384 + 313];   \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInTopCr        = src[(globalIdx/128 - mcu_width) * 384 + 376];   \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInTopCr;                                    \n"
"    dataInRightTopCr   = src[(globalIdx/128 - mcu_width) * 384 + 377];   \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63)){       \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 263];  \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) * 384 + 262];  \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 327];  \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) * 384 + 326];  \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"     (globalIdx / 128 / mcu_width) && (localIdx == 7)) {                 \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 319];  \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width) * 384 + 318];  \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 383];  \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width) * 384 + 382];  \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63))  {     \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 312];          \n"
"    dataInRightTopCb    = src[(globalIdx/128 + 1) * 384 + 304];          \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr = dataInCr;                                           \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 376];          \n"
"    dataInRightTopCr    = src[(globalIdx/128 + 1) * 384 + 368];          \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) &&                              \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 319];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - 1) * 384 + 311];          \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 383];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - 1) * 384 + 375];          \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width)&&                               \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 56))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 256];  \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 319];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - 1) * 384 + 311];          \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width- 1)* 384 + 263];\n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) * 384 + 257];  \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 320];  \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 383];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - 1) * 384 + 375];          \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width- 1)* 384 + 327];\n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) * 384 + 321];  \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) && (localIdx == 63))  {     \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) * 384 + 263];  \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 312];          \n"
"    dataInRightTopCb    = src[(globalIdx/128 + 1) * 384 + 304];          \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) * 384 + 262];  \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width+ 1)* 384 + 256];\n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) * 384 + 327];  \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 376];          \n"
"    dataInRightTopCr    = src[(globalIdx/128 + 1) * 384 + 368];          \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) * 384 + 326];  \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width+ 1)* 384 + 320];\n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"     (globalIdx / 128 / mcu_width) && (localIdx == 7)){                  \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 319];  \n"
"    dataInRightCb       = src[(globalIdx/128 + 1) * 384 + 256];          \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width) * 384 + 318];  \n"
"    dataInRightTopCb    = src[(globalIdx/128 - mcu_width+ 1)* 384 + 312];\n"
"    dataInRightBottomCb = src[(globalIdx/128 + 1) * 384 + 264];          \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 383];  \n"
"    dataInRightCr       = src[(globalIdx/128 + 1) * 384 + 320];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width) * 384 + 382];  \n"
"    dataInRightTopCr    = src[(globalIdx/128 - mcu_width+ 1)* 384 + 376];\n"
"    dataInRightBottomCr = src[(globalIdx/128 + 1) * 384 + 320 + 8];      \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 / mcu_width) && (localIdx == 0) &&           \n"
"     (globalIdx / 128 % mcu_width)){                                     \n"
"    dataInTopCb         = src[(globalIdx/128 - mcu_width) * 384 + 312];  \n"
"    dataInLeftCb        = src[(globalIdx/128 - 1) * 384 + 256 + 7];      \n"
"    dataInLeftTopCb     = src[(globalIdx/128 - mcu_width- 1)* 384 + 319];\n"
"    dataInRightTopCb    = src[(globalIdx/128 - mcu_width) * 384 + 313];  \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 - 1) * 384 + 271];          \n"
"                                                                         \n"
"    dataInTopCr         = src[(globalIdx/128 - mcu_width) * 384 + 376];  \n"
"    dataInLeftCr        = src[(globalIdx/128 - 1) * 384 + 327];          \n"
"    dataInLeftTopCr     = src[(globalIdx/128 - mcu_width- 1)* 384 + 383];\n"
"    dataInRightTopCr    = src[(globalIdx/128 - mcu_width) * 384 + 377];  \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 - 1) * 384 + 320 + 15];     \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) == (mcu_width - 1) &&           \n"
"      (localIdx % 8 == 7) && localIdx != 7 && localIdx != 63) {          \n"
"    dataInRightCb       = dataInCb;                                      \n"
"    dataInRightTopCb    = dataInTopCb;                                   \n"
"    dataInRightBottomCb = dataInBottomCb;                                \n"
"                                                                         \n"
"    dataInRightCr       = dataInCr;                                      \n"
"    dataInRightTopCr    = dataInTopCr;                                   \n"
"    dataInRightBottomCr = dataInBottomCr;                                \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 / mcu_width) && !(localIdx / 8)&&           \n"
"      localIdx != 7 && localIdx != 0 ){                                  \n"
"    dataInTopCb      = dataInCb;                                         \n"
"    dataInLeftTopCb  = dataInLeftCb;                                     \n"
"    dataInRightTopCb = dataInRightCb;                                    \n"
"                                                                         \n"
"    dataInTopCr      = dataInCr;                                         \n"
"    dataInLeftTopCr  = dataInLeftCr;                                     \n"
"    dataInRightTopCr = dataInRightCr;                                    \n"
"  }                                                                      \n"
"  else if (!(globalIdx / 128 % mcu_width) && !(localIdx & 0x07) &&       \n"
"    (localIdx != 0) && (localIdx != 56))  {                              \n"
"    dataInLeftCb       = dataInCb;                                       \n"
"    dataInLeftTopCb    = dataInTopCb;                                    \n"
"    dataInLeftBottomCb = dataInBottomCb;                                 \n"
"                                                                         \n"
"    dataInLeftCr       = dataInCr;                                       \n"
"    dataInLeftTopCr    = dataInTopCr;                                    \n"
"    dataInLeftBottomCr = dataInBottomCr;                                 \n"
"  }                                                                      \n"
"  else if ((localIdx / 8 == 7) &&                                        \n"
"    (globalIdx / 128 / mcu_width) ==                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) &&                          \n"
"    (localIdx != 56) && (localIdx != 63))  {                             \n"
"    dataInBottomCb      = dataInCb;                                      \n"
"    dataInLeftBottomCb  = dataInLeftCb;                                  \n"
"    dataInRightBottomCb = dataInRightCb;                                 \n"
"                                                                         \n"
"    dataInBottomCr      = dataInCr;                                      \n"
"    dataInLeftBottomCr  = dataInLeftCr;                                  \n"
"    dataInRightBottomCr = dataInRightCr;                                 \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) && !(localIdx & 0x07) &&        \n"
"    (localIdx != 0) && (localIdx != 56))  {                              \n"
"    dataInLeftCb       = src[(globalIdx/128- 1)*384 +256 +localIdx + 7]; \n"
"    dataInLeftTopCb    = src[(globalIdx/128- 1)*384 +256 +localIdx - 1]; \n"
"    dataInLeftBottomCb = src[(globalIdx/128- 1)*384 +256 +localIdx + 15];\n"
"                                                                         \n"
"    dataInLeftCr       = src[(globalIdx/128- 1)*384 +320 +localIdx + 7]; \n"
"    dataInLeftTopCr    = src[(globalIdx/128- 1)*384 +320 +localIdx - 1]; \n"
"    dataInLeftBottomCr = src[(globalIdx/128- 1)*384 +320 +localIdx + 15];\n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 / mcu_width) && !(localIdx / 8) &&           \n"
"      localIdx != 7 && localIdx != 0 ){                                  \n"
"    dataInTopCb       = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 312 + localIdx];                           \n"
"    dataInLeftTopCb   = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 311 + localIdx];                           \n"
"    dataInRightTopCb  = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 313 + localIdx];                           \n"
"                                                                         \n"
"    dataInTopCr       = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 376 + localIdx];                           \n"
"    dataInLeftTopCr   = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 375 + localIdx];                           \n"
"    dataInRightTopCr  = src[(globalIdx/128 - mcu_width) *                \n"
"                        384 + 377 + localIdx];                           \n"
"  }                                                                      \n"
"  else if ((globalIdx / 128 % mcu_width) != (mcu_width - 1) &&           \n"
"      (localIdx % 8 == 7) &&                                             \n"
"      localIdx != 7 && localIdx != 63) {                                 \n"
"    dataInRightCb       = src[(globalIdx/128+ 1) * 384 + 249 + localIdx];\n"
"    dataInRightTopCb    = src[(globalIdx/128+ 1) * 384 + 241 + localIdx];\n"
"    dataInRightBottomCb = src[(globalIdx/128+ 1) * 384 + 257 + localIdx];\n"
"                                                                         \n"
"    dataInRightCr       = src[(globalIdx/128+ 1) * 384 + 313 + localIdx];\n"
"    dataInRightTopCr    = src[(globalIdx/128+ 1) * 384 + 305 + localIdx];\n"
"    dataInRightBottomCr = src[(globalIdx/128+ 1) * 384 + 321 + localIdx];\n"
"  }                                                                      \n"
"  else if ((localIdx / 8 == 7) &&                                        \n"
"    (globalIdx / 128 / mcu_width) !=                                     \n"
"    (get_global_size(0) /128 /mcu_width - 1) &&                          \n"
"    (localIdx != 56) && (localIdx != 63))  {                             \n"
"    dataInBottomCb      = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 200 + localIdx];                         \n"
"    dataInLeftBottomCb  = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 199 + localIdx];                         \n"
"    dataInRightBottomCb = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 201 + localIdx];                         \n"
"                                                                         \n"
"    dataInBottomCr      = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 264 + localIdx];                         \n"
"    dataInLeftBottomCr  = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 263 + localIdx];                         \n"
"    dataInRightBottomCr = src[(globalIdx/128 + mcu_width) *              \n"
"                          384 + 265 + localIdx];                         \n"
"  }                                                                      \n"
"                                                                         \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].x =         \n"
"    ((dataInCb * 3 + dataInTopCb) * 3 +                                  \n"
"    dataInLeftCb * 3 + dataInLeftTopCb + 8) >> 4;                        \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].y =         \n"
"    ((dataInCb * 3 + dataInTopCb) * 3 +                                  \n"
"    dataInRightCb * 3 + dataInRightTopCb + 7) >> 4;                      \n"
"                                                                         \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].x =         \n"
"    ((dataInCb * 3 + dataInBottomCb) * 3 +                               \n"
"    dataInLeftCb * 3 + dataInLeftBottomCb + 8) >> 4;                     \n"
"  cb_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].y =         \n"
"    ((dataInCb * 3 + dataInBottomCb) * 3 +                               \n"
"    dataInRightCb * 3 + dataInRightBottomCb + 7) >> 4;                   \n"
"                                                                         \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].x =         \n"
"    ((dataInCr * 3 + dataInTopCr) * 3 +                                  \n"
"    dataInLeftCr * 3 + dataInLeftTopCr + 8) >> 4;                        \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 0].y =         \n"
"    ((dataInCr * 3 + dataInTopCr) * 3 +                                  \n"
"    dataInRightCr * 3 + dataInRightTopCr + 7) >> 4;                      \n"
"                                                                         \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].x =         \n"
"    ((dataInCr * 3 + dataInBottomCr) * 3 +                               \n"
"    dataInLeftCr * 3 + dataInLeftBottomCr + 8) >> 4;                     \n"
"  cr_upsample[localIdx + localIdx%8/4*28+localIdx/32*32 + 4].y =         \n"
"    ((dataInCr * 3 + dataInBottomCr) * 3 +                               \n"
"    dataInRightCr * 3 + dataInRightBottomCr + 7) >> 4;                   \n"
"  }                                                                      \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.x);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].x);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].x);                        \n"
"                                                                         \n"
"  imgB.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.x  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.x  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  valueY  = convert_int(dataInY.y);                                      \n"
"  valueCb = convert_int(cb_upsample[localIdx].y);                        \n"
"  valueCr = convert_int(cr_upsample[localIdx].y);                        \n"
"                                                                         \n"
"  imgB.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)91881 * (valueCr - 128) + (int)32768) >> 16));                \n"
"  imgG.y  = convert_uchar_sat(valueY +                                   \n"
"    ((((int)32768 - (int)22554 * (valueCb - 128))                        \n"
"    - ((int)46802 * (valueCr - 128))) >> 16));                           \n"
"  imgR.y  = convert_uchar_sat(valueY  +                                  \n"
"    (((int)116130 * (valueCb - 128) + (int)32768) >> 16));               \n"
"                                                                         \n"
"  inter[transOffset * 6 + 0] = imgR.x;                                   \n"
"  inter[transOffset * 6 + 1] = imgG.x;                                   \n"
"  inter[transOffset * 6 + 2] = imgB.x;                                   \n"
"  inter[transOffset * 6 + 3] = imgR.y;                                   \n"
"  inter[transOffset * 6 + 4] = imgG.y;                                   \n"
"  inter[transOffset * 6 + 5] = imgB.y;                                   \n"
"                                                                         \n"
"  barrier(CLK_LOCAL_MEM_FENCE);                                          \n"
"  if (localIdx < 96)                                                     \n"
"    dst[y * mcu_width * 96 + x * 6 + localIdx % 6                        \n"
"      + localIdx / 6 * mcu_width * 6] = vload8(localIdx, inter);         \n"
"                                                                         \n"
"}                                                                        \n";

#endif
